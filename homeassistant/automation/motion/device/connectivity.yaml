###
# homeassistant/automation/motion/device/connectivity.yaml
###


## rescan

- id: motion_device_connectivity_rescan
  alias: motion_device_connectivity_rescan
  mode: single
  initial_state: on
  trigger:
  action:
    - service: automation.trigger
      data_template:
        entity_id: automation.motion_device_connectivity_binary_sensors

## binary_sensors

- id: motion_device_connectivity_binary_sensors
  alias: motion_device_connectivity_binary_sensors
  mode: restart
  initial_state: on
  trigger:
    - platform: time_pattern
      minutes: '/5'
    - platform: homeassistant
      event: start
  variables:
    all: >-
      [{%- for state in states.binary_sensor if 'device_class' in state.attributes and device_id(state.entity_id)|lower != 'none' and state.attributes.device_class=='connectivity' and not '.motion_' in state.entity_id -%}
        {%- if not loop.first -%},{% endif -%}
        "{{- device_attr(device_id(state.entity_id),'name') -}}"
      {%- endfor -%}]
    ids: >-
      {%- if all != [] and all is iterable and all|count > 0 -%}
        {{- all|sort|unique|list -}}
      {% else %}null{% endif %}
    total: >-
      {% set s = ids %}
      {% if s|lower != 'unknown' and s|lower != 'none' and not s is string %}
        {{ s|count }}
      {%- else -%}0{%- endif %}
    update: >-
      {% set s = ids %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in (states.button|list + states.switch|list) if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'update' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set v = state.state -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}"}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    restart: >-
      {% set s = ids %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in (states.button|list + states.switch|list) if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'restart' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set v = state.state -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}"}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    controls: >-
      {% set s = ids %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in (states.button|list + states.switch|list) if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'null' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set ctl = state_attr(state.entity_id,'friendly_name') -%}
            {%- set ctl = ctl|replace(i+' ','') -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}","control":"{{- ctl -}}"}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    test: >-
      {% set s = ids %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in states.sensor if device_attr(state.entity_id, 'name') == i and state.attributes.self_test|default('none')|string != 'none' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}","state":"{{- state.state -}}","updated":{{- state.last_updated|as_timestamp(None) -}}}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    areas: >-
      {% set s = ids -%}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in states.binary_sensor if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'connectivity' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set v = state.state -%}
            {"id":"{{- i -}}","area":"{{- area_id(state.entity_id) -}}","state":"{{- state.state -}}"}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    status: >-
      {% set s = ids -%}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in states.binary_sensor if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'connectivity' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set v = state.state -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}","state":"{{- state.state -}}","updated":{{- state.last_updated|as_timestamp(None) -}}}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    devices: >-
      {%- if ids|lower != 'none' and ids|lower != 'null' -%}
        [{% for i in ids -%}
          {%- set j = status|selectattr('id','==',i)|map(attribute='entity_id')|first %}
          {%- set k = areas|selectattr('id','==',i)|map(attribute='area')|first %}
          {%- if not loop.first -%},{%- endif -%}
          {"id":"{{- i -}}","did":"{{- device_id(j) -}}","area":"{{- k -}}"}
        {%- endfor -%}]
      {%- else -%}none{%- endif %}
  action:
    - alias: 'update sensor.motion_device_connectivity ids, etc..'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_connectivity
        ids: >-
          {{ ids }}
        total: >-
          {{ total }}
        devices: >-
          {{ devices }}
        update: >-
          {{ update }}
        restart: >-
          {{ restart }}
        controls: >-
          {{ controls }}
        test: >-
          {{ test }}
        areas: >-
          {{ areas }}
        state: >-
          {{ states('binary_sensor.motion_device_connectivity') }}

## update status

- id: motion_device_connectivity_status
  alias: motion_device_connectivity_status
  mode: single
  initial_state: on
  trigger:
    - platform: time_pattern
      seconds: '/15'
    - platform: state
      entity_id: binary_sensor.motion_device_connectivity
      attribute: 'ids'
  variables:
    ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity','ids') }}
    status: >-
      {% set s = ids -%}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string -%}
        [{%- for i in s -%}
          {% set o = loop %}
          {%- for state in states.binary_sensor if device_attr(state.entity_id, 'name') == i and state.attributes.device_class|default('null')|string == 'connectivity' -%}
            {%- if not o.first or not loop.first -%},{%- endif -%}
            {%- set v = state.state -%}
            {"id":"{{- i -}}","entity_id":"{{- state.entity_id -}}","state":"{{- state.state -}}","updated":{{- state.last_updated|as_timestamp(None) -}}}
          {%- endfor -%}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    positive: >-
      {% set s = status %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and not s is string -%}
        [{% for i in s if 'entity_id' in i and not i.entity_id is none and is_state(i.entity_id,'on') -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- state_attr(i.entity_id,'friendly_name') -}}"
        {%- endfor -%}]
      {%- else -%}none{%- endif %}
    negative: >-
      {% set s = status %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and not s is string -%}
        [{% for i in s if 'entity_id' in i and not i.entity_id is none and is_state(i.entity_id,'off') -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- state_attr(i.entity_id,'friendly_name') -}}"
        {%- endfor -%}]
      {%- else -%}none{%- endif %}
    values: >-
      {% set s = status %}
      {%- if s|lower != 'unknown' and s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and not s is string -%}
        [{% for i in s if 'entity_id' in i and not i.entity_id is none -%}
          {%- if not loop.first -%},{%- endif -%}
          {% if is_state(i.entity_id,'on') %}1{% else %}0{% endif %}
        {%- endfor -%}]
      {%- else -%}null{%- endif %}
    value: >-
      {% set s = values %}
      {% if s|lower != 'unknown' and s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'null' %}
        {% if s|sum|int(0) > 0 %}on{% else %}off{% endif %}
      {% else %}null{% endif %}
  action:
    - alias: 'update sensor.motion_device_connectivity state'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_connectivity
        status: >-
          {{ status }}
        positive: >-
          {{ positive }}
        negative: >-
          {{ negative }}
        state: >-
          {{ value }}

## update, restart, and other contols

- id: motion_device_connectivity_self_test
  alias: motion_device_connectivity_self_test
  mode: single
  initial_state: on
  trigger:
  condition:
    condition: and
    conditions:
      - alias: 'test if self_test is on'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_connectivity_self_test','on') }}
  variables:
    entity_ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity_self_test','entity_ids') }}
  action:
    - alias: 'test connectivity sensors'
      repeat:
        while:
          - alias: 'test if not done'
            condition: template
            value_template: >-
              {% set s = entity_ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - alias: 'pressing button'
            service: button.press
            data_template:
              entity_id: >-
                {{ entity_ids[repeat.index - 1] }}

- id: motion_device_connectivity_mute
  alias: motion_device_connectivity_mute
  mode: single
  initial_state: on
  trigger:
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_connectivity_mute','on') }}
  variables:
    entity_ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity_mute','entity_ids') }}
  action:
    - alias: 'mute connectivity sensors'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = entity_ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - service: button.press
            data_template:
              entity_id: >-
                {{ entity_ids[repeat.index - 1] }}

- id: motion_device_connectivity_unmute
  alias: motion_device_connectivity_unmute
  mode: single
  initial_state: on
  trigger:
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_connectivity_unmute','on') }}
  variables:
    entity_ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity_unmute','entity_ids') }}
  action:
    - alias: 'unmute connectivity sensors'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = entity_ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - service: button.press
            data_template:
              entity_id: >-
                {{ entity_ids[repeat.index - 1] }}

- id: motion_device_connectivity_restart
  alias: motion_device_connectivity_restart
  mode: single
  initial_state: on
  trigger:
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_connectivity_restart','on') }}
  variables:
    entity_ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity_restart','entity_ids') }}
  action:
    - alias: 'restart connectivity sensors'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = entity_ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - service: button.press
            data_template:
              entity_id: >-
                {{ entity_ids[repeat.index - 1] }}

- id: motion_device_connectivity_update
  alias: motion_device_connectivity_update
  mode: single
  initial_state: on
  trigger:
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_connectivity_update','on') }}
  variables:
    entity_ids: >-
      {{ state_attr('binary_sensor.motion_device_connectivity_update','entity_ids') }}
  action:
    - alias: 'update connectivity sensors'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = entity_ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - service: button.press
            data_template:
              entity_id: >-
                {{ entity_ids[repeat.index - 1] }}

# missing

- id: motion_device_connectivity_missing
  alias: motion_device_connectivity_missing
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_connectivity_exist
    - platform: state
      entity_id: automation.motion_device_connectivity_binary_sensors
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_device_connectivity_exist','off') }}
      - condition: template
        value_template: >
          {{ is_state_attr('automation.motion_device_connectivity_binary_sensors','current',0) }}
      - condition: template
        value_template: >
          {{ 'connectivity' in state_attr('binary_sensor.motion_device_class','binary_sensors') }}
  variables:
    ip: >-
      {{ none }}
    latitude: >-
      {{ none }}
    longitude: >-
      {{ none }}
    notification_id: >-
      {{ 'device-connectivity-notify' }}
    icon: >-
      {% set icon = 'notification-connectivity-missing' %}
      {{ icon }}
    header: >-
      {{- '[![](/local/images/icons/' + icon + '.png)]()' -}}
      {{- '<hr>' -}}
    footer: >-
      {{- '<hr>' -}}
    title: >-
      {% set title = states('input_text.motion_app') + ': connectivity sensor not found' %}
      {{ title }}
    body: >-
      The connectivity sensor could not be found; please setup the integration by clicking [here](/config/integrations).
    message: >-
      {{ header }}
      {{ body }}
      {{ footer }}
  action:
    - alias: 'notify missing connectivity sensor'
      service: persistent_notification.create
      data_template:
        title: >-
          {{- title -}}
        notification_id: >-
          {{- notification_id -}}
        message: >-
          {{- message -}}

# found

- id: motion_device_connectivity_found
  alias: motion_device_connectivity_found
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_connectivity_exist
      to: 'on'
  variables:
    ids: >-
      {% set ids = state_attr('binary_sensor.motion_device_connectivity','ids') %}
      {{ ids }}
    devices: >-
      {% set devices = state_attr('binary_sensor.motion_device_connectivity','devices') %}
      {{ devices }}
    title: >-
      {% set title = states('input_text.motion_app') + ': connectivity sensor found' %}
      {{ title }}
    notification_id: >-
      {{ 'device-connectivity-notify' }}
    icon: >-
      {% set icon = 'notification-connectivity-found' %}
      {{ icon }}
    header: >-
      {{- '[![](/local/images/icons/' + icon + '.png)]()' -}}
      {{- '<hr>' -}}
    footer: >-
      {{- '<hr>' -}}
    body: >-
      Sensor(s) for connectivity found:
      {{- '<p>' -}}
      {%- for i in devices -%}
        {%- if not loop.first -%}<br>{%- endif -%}
        [{{ i.id }}](/config/devices/device/{{- i.did -}}) in [{{ i.area }}](/config/areas/area/{{- i.area -}})
      {%- endfor %}
    message: >-
      {{ header }}
      {{ body }}
      {{ footer }}
  action:
    - alias: 'notify found connectivity sensor'
      service: persistent_notification.create
      data_template:
        title: >-
          {{- title -}}
        notification_id: >-
          {{- notification_id -}}
        message: >-
          {{- message -}}

- id: motion_device_connectivity_found_dismiss
  alias: motion_device_connectivity_found_dismiss
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_connectivity_exist
      to: 'on'
      for:
        minutes: >-
          {{ states('input_number.motion_device_class_dismiss')|int(5) }}
  variables:
    notification_id: >-
      {{ 'device-connectivity-notify' }}
  action:
    - alias: 'dismiss connectivity found notification'
      service: persistent_notification.dismiss
      data_template:
        notification_id: >-
          {{ notification_id }}

# detected

- id: motion_device_connectivity_detected
  alias: motion_device_connectivity_detected
  mode: single
  initial_state: on
  trigger:
    - platform: template
      value_template: >-
        {{ is_state_attr('binary_sensor.motion_device_connectivity','bad',states('binary_sensor.motion_device_connectivity')) }}
  variables:
    devices: >-
      {% set devices = none %}
      {% set s = state_attr('binary_sensor.motion_device_connectivity','devices') %}
      {% if s|lower != 'none' and s|lower != 'null' and not s is string and s is iterable and s|count > 0 %}
        {% set devices = s %}
      {%- endif %}
      {{ devices }}
    last: >-
      {% set last = none %}
      {% set s = state_attr('binary_sensor.motion_device_connectivity','status')|selectattr('state','==','on')|sort(attribute='updated',reverse=true)|list %}
      {% if s|lower != 'none' and s|lower != 'null' and not s is string and s is iterable and s|count > 0 %}
        {% set last = s %}
      {%- endif %}
      {{ last  }}
    which: >-
      {% set which = none %}
      {% if last|lower != 'none' %}
        {% set which = last|map(attribute='id')|first %}
      {%- endif %}
      {{ which }}
    did: >-
      {% set did = none %}
      {% if devices|lower != 'none'  and which|lower != 'none' %}
        {% set did = devices|selectattr('id','==',which)|map(attribute='did')|first %}
      {%- endif %}
      {{ did }}
    where: >-
      {% set where = none %}
      {% if devices|lower != 'none'  and which|lower != 'none' %}
        {% set where = devices|selectattr('id','==',which)|map(attribute='area')|first %}
      {%- endif %}
      {{ where }}
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ which|lower != 'none' and which|lower != 'null' and which|length > 0 }}
  action:
    - alias: 'update binary_sensor.motion_device_connectivity which, where, did'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_connectivity
        which: >-
          {{ which }}
        where: >-
          {{ where }}
        did: >-
          {{ did }}
    - alias: 'trigger motion notification'
      service: automation.trigger
      data_template:
        entity_id: automation.motion_device_connectivity_on_notify

# detected notify

- id: motion_device_connectivity_on_notify
  alias: motion_device_connectivity_on_notify
  mode: single
  initial_state: on
  trigger:
  variables:
    ids: >-
      {% set ids = state_attr('binary_sensor.motion_device_connectivity','ids') %}
      {{ ids }}
    positive: >-
      {% set positive = state_attr('binary_sensor.motion_device_connectivity','positive') %}
      {{ positive }}
    which: >-
      {% set which = state_attr('binary_sensor.motion_device_connectivity','which') %}
      {{ which }}
    where: >-
      {% set where = state_attr('binary_sensor.motion_device_connectivity','where') %}
      {{ where }}
    did: >-
      {% set did = state_attr('binary_sensor.motion_device_connectivity','did') %}
      {{ did }}
    action: >-
      {% set action = 'connectivity-okay' %}
      {{ action }}
    url: >-
      {% set url = '/lovelace/connectivity-okay' %}
      {{ url }}
    title: >-
      {% set title = states('input_text.motion_app') + ': connectivity alarm' %}
      {{ title }}
    notification_id: >-
      {{ 'device-connectivity-status-' + which|string }}
    icon: >-
      {% set icon = 'notification-connectivity-detected' %}
      {{ icon }}
    header: >-
      {{- '[![](/local/images/icons/' + icon + '.png)]()' -}}
      {{- '<hr>' -}}
    footer: >-
      {{ '<hr>' }}
      {%- if did|lower != 'none' and did|lower != 'null' -%}
        {{- '[![](https://img.shields.io/badge/device-info-blue.svg)](' + '/config/devices/device/' + did + ')' -}}
      {%- endif -%}
    body: >-
      Your home connectivity alarm was triggered; sensor: {{ which -}}; where: {{ where -}}.
      We have notified **{{- state_attr('sensor.motion_role_primary','friendly_name') -}}** about your connectivity alarm.
      If you are fine handling this situation on your own, click the **{{- action -}}** button below.
      {{- '<p>' -}}
      {{-  '[![](https://img.shields.io/badge/' + action + '-green.svg)](' + url + ')' -}}
    message: >-
      {{- header -}}
      {{- body -}}
      {{- footer -}}
  action:
    - alias: 'notify connectivity sensor activated'
      service: persistent_notification.create
      data_template:
        title: >-
          {{- title -}}
        notification_id: >-
          {{- notification_id -}}
        message: >-
          {{- message -}}

# cleared notify

- id: motion_device_connectivity_off_notify
  alias: motion_device_connectivity_off_notify
  mode: single
  initial_state: on
  trigger:
    - platform: template
      value_template: >-
        {{ is_state_attr('binary_sensor.motion_device_connectivity','good',states('binary_sensor.motion_device_connectivity')) }}
  variables:
    which: >-
      {% set which = none %}
      {% set s = state_attr('binary_sensor.motion_device_connectivity','status')|selectattr('state','==','off')|sort(attribute='updated',reverse=true)|list %}
      {% if s|lower != 'none' and s|lower != 'null' and not s is string and s is iterable and s|count > 0 %}
        {% set which = s|map(attribute='id')|first  %}
      {%- endif %}
      {{ which }}
    notification_id: >-
      {{ 'device-connectivity-status-' + which|string }}
    icon: >-
      {% set icon = 'notification-connectivity-cleared' %}
      {{ icon }}
    title: >-
      {% set title = states('input_text.motion_app') + ': connectivity cleared' %}
      {{ title }}
    header: >-
      {{- '[![](/local/images/icons/' + icon + '.png)]()' -}}
      {{- '<hr>' -}}
    footer: >-
      {{ '<hr>' }}
    body: >-
      Your home connectivity alarm has cleared; sensor: {{ which -}}.
    message: >-
      {{- header -}}
      {{- body -}}
      {{- footer -}}
  action:
    - alias: 'notify connectivity sensor activated'
      service: persistent_notification.create
      data_template:
        title: >-
          {{- title -}}
        notification_id: >-
          {{- notification_id -}}
        message: >-
          {{- message -}}

# cleared dismissed

- id: motion_device_connectivity_off_dismiss
  alias: motion_device_connectivity_off_dismiss
  mode: single
  initial_state: on
  trigger:
    - platform: template
      value_template: >-
        {{ is_state_attr('binary_sensor.motion_device_connectivity','good',states('binary_sensor.motion_device_connectivity')) }}
      for:
        minutes: >-
          {{ states('input_number.motion_device_class_dismiss')|int(5) }}
  variables:
    ids: >-
      {%- set ids = state_attr('binary_sensor.motion_device_connectivity','ids') -%}
      {%- if ids|lower != 'none' and not ids is string and ids is iterable and ids|count > 0 -%}
        [{%- for i in ids -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- 'device-connectivity-status-' + i|string -}}"
        {%- endfor -%}]
      {%- else -%}none{%- endif %}
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ ids|lower != 'none' and ids is iterable and ids|count > 0 }}
  action:
    - alias: 'dismiss connectivity status'
      repeat:
        while:
          - alias: 'test if not done'
            condition: template
            value_template: >-
              {% set s = ids[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'null' and s|string|length > 0 }}
        sequence:
          - alias: 'dismissing persistent notification'
            service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ ids[repeat.index - 1] }}
