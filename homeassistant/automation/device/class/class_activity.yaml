###
# homeassistant/automation/device/class/class_activity.yaml
###

- id: motion_device_class_activity_automation_enable
  alias: motion_device_class_activity_automation_enable
  mode: 'single'
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_class_activity_exist
      to: 'on'
  variables:
    automations: >-
      {% set automations = ['motion_device_class_activity','motion_device_class_activity_notify','motion_device_class_activity_dismiss'] %}
      {{ automations }}
  action:
    - alias: 'enable automations for device_class_activity'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = automations[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              automation: >-
                {% set s = automations[repeat.index-1] %}
                {{ 'automation.' + s|string }}
          - condition: template
            value_template: >-
              {{ states(automation)|lower == 'off' }}
          - service: automation.turn_on
            data_template:
              entity_id: >-
                {{ automation }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','trace') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                TRACE: activity automation
              notification_id: >
                {{- 'log-automation-activity' -}}
              message: >-
                Enable automation: {{ automation }}
    - alias: 'indicate complete'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_activity
        automations: >-
          {{ 'on' }}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: activity enabled
                notification_id: >
                  {{- 'log-automation-activity' -}}
                message: >-
                  All activity automations enabled: {{ automations|count }}

- id: motion_device_class_activity_automation_disable
  alias: motion_device_class_activity_automation_disable
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_activity_exist
    to: 'off'
  condition:
    - alias: 'test if activity existence changed'
      condition: template
      value_template: >-
        {{ trigger.to_state.state != trigger.from_state.state }}
  variables:
    automations: >-
      {% set automations = ['motion_device_class_activity','motion_device_class_activity_notify','motion_device_class_activity_dismiss'] %}
      {{ automations }}
  action:
    - alias: 'disable automations for device_class_activity'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = automations[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              automation: >-
                {% set s = automations[repeat.index-1] %}
                {{ 'automation.' + s|string }}
          - alias: 'test if automation is on'
            condition: template
            value_template: >-
              {{ states(automation)|lower == 'on' }}
          - service: automation.turn_off
            data_template:
              entity_id: >-
                {{ automation }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','trace') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                {% set s = automations[repeat.index-1] %}
                TRACE: activity automation
              notification_id: >
                {{- 'log-automation-activity' -}}
              message: >-
                Disable automation: {{ automation }}
    - alias: 'indicate complete'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_activity
        automations: >-
          {{ 'off' }}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: activity disabled
                notification_id: >
                  {{- 'log-automation-activity' -}}
                message: >-
                  All activity automations disabled: {{ automations|count }}

- id: motion_device_class_activity
  alias: motion_device_class_activity
  mode: single
  initial_state: 'off'
  trigger:
    - platform: 'state'
      entity_id: 'binary_sensor.motion_device_class_activity_detect'
      for:
        seconds: 10
  variables:
    status: >-
      {% set status = state_attr('binary_sensor.motion_device_class_activity_detect','status') %}
      {{ status }}
    count: >-
      {% set count = None %}
      {%- if status|lower != 'none' and status is iterable -%}
      {% set count = status|count %}
      {%- endif -%}
      {{ count }}
    ids: >-
      {% set ids = None %}
      {%- if status|lower != 'none' and status is iterable -%}
        {% set ids = status|map(attribute='id')|sort|unique|list %}
      {%- endif -%}
      {{ ids }}
    dids: >-
      {% set dids = None %}
      {%- if status|lower != 'none' and status is iterable -%}
        {% set dids = status|map(attribute='did')|sort|unique|list %}
      {%- endif -%}
      {{ dids }}
    markdown: >-
      {%- set devices = state_attr('binary_sensor.motion_device_class','devices') -%}
      {%- if dids is iterable and dids|count > 0 and devices is iterable and devices|count > 0 -%}
        {{- '<h2>Activity</h2>' -}}
        {%- for i in dids -%}
          {%- if loop.first -%}{{- '<ul>' -}}{%- endif -%}
          {%- set s = devices|selectattr('did','==',i)|list -%}
          {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
            {%- set s = s|first -%}
            <li><a href="/config/devices/device/{{- s.did -}}">{{- s.name -}}</a> in <a href="/config/areas/area/{{- s.area -}}">{{- s.area -}}</a></li>
          {%- endif -%}
          {%- if loop.last -%}{{- '</ul>' -}}{%- endif -%}
        {%- endfor -%}
        {#- from unavailable -#}
        {%- for i in dids -%}
          {%- if loop.first -%}<ul>{%- endif -%}
          {{- '<li>' -}}
          {%- set d = devices|selectattr('did','==',i)|list -%}
          {%- if d|count > 0 -%}
            {%- set d = d|first -%}
            {%- if d is iterable and 'did' in d -%}
              <a href="/config/devices/device/{{- d.did -}}">{{- d.name -}}</a>
            {%- else -%}{{- i -}}{%- endif -%}
          {%- else -%}{{- i -}}{%- endif -%}
          {%- for j in status|map(attribute='class')|sort|unique|list
              if state_attr('binary_sensor.motion_device_' + j|string ,'activity') is iterable
                and state_attr('binary_sensor.motion_device_' + j|string ,'activity')|count > 0
                and state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('did','==',i) is iterable
                and state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('did','==',i)|count > 0 -%}
            {%- if loop.first -%}<ul>{%- endif -%}
            {%- set u = state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('did','==',i)|list -%}
            {%- set c = u|count -%}
            {%- set o = u|map(attribute='updated')|min|as_datetime|relative_time -%}
            {{- '<li><i>' -}}
            {{ c|default(0) }} {{ j }} sensor(s); {{ o|default('unknown') }} ago
            {{- '</i></li>' -}}
            {%- if loop.last -%}</ul>{%- endif -%}
          {%- endfor -%}
          {%- if loop.last -%}</ul>{%- endif -%}
        {%- endfor -%}
      {%- else -%}<b>No devices</b>{%- endif %}
      <br><b>Alarms enabled</b>: <code>{{- state_attr('binary_sensor.motion_device_class_activity_exist','alarm')|lower == 'on' }}</code>
      <br><b>Outstanding alarms</b>: <code>{{- count }}</code>
      <br><i>Last updated</i>: {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    last: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','last') }}
    active: >-
      {{ status|count|int(0) > 0 }}
    details: >-
      {%- if status is iterable and status|count > 0 -%}
        {%- for s in status -%}
          {%- if loop.first -%}{{- '{' -}}{%- else -%},{%- endif -%}
          "{{- state_attr(s.entity_id,'friendly_name') -}}": "{{- s.state -}}"
          {%- if loop.last-%}{{- '}' -}}{%- endif -%}
        {%- endfor -%}
      {%- else -%}none{%- endif %}
  action:
    - alias: 'update binary_sensor.motion_device_class_activity'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_activity
        last: >-
          {% if active|lower == 'true' %}{{ utcnow().timestamp() }}{% else %}{{ last }}{% endif %}
        dids: >-
          {{ dids }}
        ids: >-
          {{ ids }}
        count: >-
          {{ count }}
        markdown: >-
          {{ markdown }}
        status: >-
          {{ status }}
        details: >-
          {{ details }}
        state: >-
          {% if active|lower == 'true' %}on{% else %}off{% endif %}

###
- id: motion_device_class_activity_required_off
  alias: motion_device_class_activity_required_off
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    activity: >-
      {% set activity = state_attr('binary_sensor.motion_device_class_activity','ids') %}
      {{ activity }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_activity_dismiss_all' }}
    - condition: template
      value_template: >
        {{ activity|lower != 'none' and not activity is string and activity is iterable and activity|count > 0 }}
    - alias: 'required_off activity device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = activity[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = activity[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_required_off' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ 'automation.motion_device_' + which|string + '_activity_dismiss' }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                {% set s = activity[repeat.index-1] %}
                DEBUG: Require OFF: {{ s }}
              notification_id: >
                {{- 'debug-device-class-activity-actions' -}}
              message: >-
                {% set s = activity[repeat.index-1] %}
                Class {{ s }} is no longer required; automation: {{ automation }}
    - alias: 'update binary_sensor.motion_device_class_activity_exist'
      service: homeassistant.update_entity
      entity_id: binary_sensor.motion_device_class_activity_exist
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_rescan' }}

###

- id: motion_device_class_activity_dismiss_all
  alias: motion_device_class_activity_dismiss_all
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    activity: >-
      {% set activity = state_attr('binary_sensor.motion_device_class_activity','ids') %}
      {{ activity }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_activity_dismiss' }}
    - condition: template
      value_template: >
        {{ activity|lower != 'none' and not activity is string and activity is iterable and activity|count > 0 }}
    - alias: 'dismiss all activity device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = activity[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = activity[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_activity_dismiss' %}
                {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Dismiss activity alarm: {{ which }}
                      notification_id: >
                        {{- 'debug-device-class-activity-actions' -}}
                      message: >-
                        Dismiss all activity notifications {{ which -}}; {{ automation -}}: {{ states(automation)|lower }}
          - alias: 'test if automation is on'
            condition: template
            value_template: >-
              {{ states(automation)|lower == 'on' }}
          - alias: 'dismiss device <class> activity'
            service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}

###

- id: motion_device_class_activity_off
  alias: motion_device_class_activity_off
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_activity
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'trigger device_class_activity_dismiss'
      service: automation.trigger
      entity_id: automation.motion_device_class_activity_dismiss

- id: motion_device_class_activity_on
  alias: motion_device_class_activity_on
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_activity
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'trigger device_class_activity_notify'
      service: automation.trigger
      entity_id: automation.motion_device_class_activity_notify

- id: motion_device_class_activity_responses
  alias: motion_device_class_activity_responses
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_alarm_activity
      to: 'on'
  variables:
    responses: >-
      {% set responses = state_attr('binary_sensor.motion_device_class_activity_exist','responses') %}
      {{ responses }}
  condition:
    - alias: 'test if responses are valid'
      condition: template
      value_template: >
        {{ responses|lower != 'none' and not responses is string and responses is iterable and responses|count > 0 }}
  action:
    - alias: 'enable or disable response trigger automations'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = responses[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = responses[repeat.index-1] %}
                {{ which|string }}
              automation: >-
                {% set automation = 'automation.motion_device_class_activity_' + which %}
                {{ automation }}
              trigger: >-
                {% set s = responses[repeat.index-1] %}
                {% set a = state_attr('binary_sensor.motion_device_class_activity_exist',which) %}
                {% set trigger = a.trigger|default(none) %}
                {{ trigger }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower != 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'off') }}
                sequence:
                  - service: automation.turn_on
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower == 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'on') }}
                sequence:
                  - service: automation.turn_off
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Activity response: {{ which }}
                      notification_id: >-
                        {{ 'device-class-activity-responses' }}
                      message: >-
                        Response: {{ which -}}; trigger: {{ trigger -}}; automation: {{ automation }}

- id: motion_device_class_activity_response
  alias: motion_device_class_activity_response
  mode: single
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-activity-wait"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-activity-help"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-activity-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-activity-approve"
  variables:
    origin: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.origin|default(none) }}
      {% else %}none{% endif %}
    time_fired: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.time_fired|default(none) }}
      {% else %}none{% endif %}
    context: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.context }}
      {% else %}none{% endif %}
    responses: >-
      {%- set responses = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_activity_exist','responses') -%}
      {%- if s|lower != 'none' -%}
        {%- set responses = s -%}
      {%- endif -%}
      {{- responses -}}
    actions: >-
      {%- set actions = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_activity_exist','actions') -%}
      {%- if s|lower != 'none' and 'id' in s -%}
        {%- set actions = s -%}
      {%- endif -%}
      {{- actions -}}
    response: >-
      {% if trigger|lower != 'none' and actions|lower != 'none' %}
        {{ trigger.event.data.action|default(none)|string|replace(actions.id|string + '-','') }}
      {% else %}
        {{- state_attr('binary_sensor.motion_device_class_activity','response') -}}
      {% endif %}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device activity response
                notification_id: >-
                  {{ 'device-class-activity-response' }}
                message: >-
                  Response <b>received</b>: "{{ response -}}"; context: {{ context|string -}}; at: {{ time_fired }}
    - choose:
        - alias: 'test if response in responses'
          conditions:
            - condition: template
              value_template: >
                {{ response|lower in responses }}
          sequence:
            - alias: 'set device_class_activity: timestamp, when'
              variables:
                timestamp: >-
                  {{ utcnow().timestamp() }}
                when: >-
                  {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
                response: >-
                  {{ response }}
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
                  sequence:
                    - service: persistent_notification.create
                      data_template:
                        title: >-
                          INFO: Device activity updated
                        notification_id: >-
                          {{ 'device-class-activity-response' }}
                        message: >-
                          Device activity <b>updated</b> to <code>{{- response -}}</code> at <i>{{- when -}}</i>
            - alias: 'set binary_sensor.motion_device_class_activity: timestamp, when, response'
              service: python_script.set_state
              data_template:
                entity_id: binary_sensor.motion_device_class_activity
                timestamp: >-
                  {{ timestamp }}
                when: >-
                  {{ when }}
                response: >-
                  {{ response }}

##

- id: motion_device_class_activity_approve
  alias: motion_device_class_activity_approve
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'approve'
  variables:
    response: >-
      {% set response = 'approve' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_activity_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device activity: {{ response }}
                notification_id: >-
                  {{ 'device-class-activity-response' }}
                message: >-
                  Device activity response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for activity approve'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_activity_deny
  alias: motion_device_class_activity_deny
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'deny'
  variables:
    response: >-
      {% set response = 'deny' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_activity_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device activity: {{ response }}
                notification_id: >-
                  {{ 'device-class-activity-response' }}
                message: >-
                  Device activity response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for activity deny'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_activity_wait
  alias: motion_device_class_activity_wait
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'wait'
  variables:
    response: >-
      {% set response = 'wait' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_activity_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device activity: {{ response }}
                notification_id: >-
                  {{ 'device-class-activity-response' }}
                message: >-
                  Device activity response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for activity wait'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_activity_help
  alias: motion_device_class_activity_help
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'help'
  variables:
    response: >-
      {% set response = 'help' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_activity_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device activity: {{ response }}
                notification_id: >-
                  {{ 'device-class-activity-response' }}
                message: >-
                  Device activity response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'function automation for activity help'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

## alarm on/off

- id: motion_device_class_activity_alarm_off
  alias: motion_device_class_activity_alarm_off
  mode: single
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
  condition:
    condition: and
    conditions:
      - alias: 'test setup complete'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_class','on') }}
      - alias: 'activity alarm not off'
        condition: template
        value_template: >-
          {{ 'activity' in state_attr('binary_sensor.motion_device_class','alarm') }}
  variables:
    alarm: >-
      {% set s = state_attr('binary_sensor.motion_device_class','alarm') -%}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
        {%- set s = s|reject('==','activity')|list -%}
        {%- if not s is string and s is iterable and s|count > 0 -%}
          {% set alarm = s -%}
        {%- else -%}
          {% set alarm = [] -%}
        {%- endif %}
      {%- endif %}
      {%- if alarm is defined -%}
        {{ alarm }}
      {%- else -%}none{%- endif %}
  action:
    - alias: 'test if alarm list of device classes is valid'
      condition: template
      value_template: >-
        {{ alarm|lower != 'none' }}
    - alias: 'update binary_sensor.motion_device_class alarm attribute; remove: activity'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class
        alarm: >-
          {{ alarm }}
    - alias: 'update binary_sensor.motion_device_class_activity_exist'
      service: homeassistant.update_entity
      entity_id: binary_sensor.motion_device_class_activity_exist

- id: motion_device_class_activity_alarm_on
  alias: motion_device_class_activity_alarm_on
  mode: single
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
  condition:
    condition: and
    conditions:
      - alias: 'test setup complete'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_class','on') }}
      - alias: 'activity alarm not on'
        condition: template
        value_template: >-
          {{ not 'activity' in state_attr('binary_sensor.motion_device_class','alarm') }}
  variables:
    alarm: >-
      {% set s = state_attr('binary_sensor.motion_device_class','alarm') -%}
      {%- if s|lower != 'unknown' and s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
        {%- set alarm = (s|list + ['activity'])|sort|unique|list -%}
      {%- else -%}
        {%- set alarm = ['activity'] -%}
      {%- endif %}
      {%- if alarm is defined -%}
        {{ alarm }}
      {%- else -%}none{%- endif %}
  action:
    - alias: 'test if alarm list of device classes is valid'
      condition: template
      value_template: >-
        {{ alarm|lower != 'none' }}
    - alias: 'update binary_sensor.motion_device_class alarm attribute; add: activity'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class
        alarm: >-
          {{ alarm }}
    - alias: 'update binary_sensor.motion_device_class_activity_exist'
      service: homeassistant.update_entity
      entity_id: binary_sensor.motion_device_class_activity_exist

