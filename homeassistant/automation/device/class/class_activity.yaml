###
# homeassistant/automation/device/class/class_activity.yaml
###

- id: motion_device_class_activity
  alias: motion_device_class_activity
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'group.motion_device_class_activity'
      attribute: 'entity_id'
    - platform: state
      entity_id: 'group.motion_device_class_activity'
      to: 'on'
    - platform: state
      entity_id: 'binary_sensor.motion_person_occupancy'
      to: 'on'
  variables:
    occupancy: >-
      {{- 'occupancy' in trigger.entity_id -}}
    details: >-
      {%- set s = state_attr('binary_sensor.motion_device_class','sensor_list')|list + state_attr('binary_sensor.motion_device_class','binary_sensor_list')|list -%}
      [{%- for i in s|sort|unique if is_state('binary_sensor.motion_device_' + i + '_activity','on') -%}
        {%- if not loop.first -%},{%- endif -%}
        {%- for j in state_attr('binary_sensor.motion_device_' + i + '_activity','ids') -%}
          {%- if not loop .first -%},{%- endif -%}
          {"id":"{{- j -}}","class":"{{- i -}}","updated":{{- (states.binary_sensor['motion_device_' + i + '_activity'].last_updated)|as_timestamp(0) -}},"when":"{{- (states.binary_sensor['motion_device_' + i + '_activity'].last_updated)|as_timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}"}
        {%- endfor -%}
      {%- endfor -%}]
    ids: >-
      {% set ids = details|map(attribute='id')|sort|unique|list %}
      {{ ids }}
    markdown: >-
      {%- if occupancy -%}
        {{- '<h2>Occupancy</h2>' -}}
      {%- else -%}
        {{- '<h2>Activity</h2>' -}}
      {%- endif -%}
      {%- set devices = state_attr('binary_sensor.motion_device_class','devices') -%}
      {%- if ids|lower != 'none' and  devices|lower != 'none' and not devices is string and devices is iterable -%}
        {%- for i in ids if i|lower != 'none' -%}
          {%- if loop.first -%}{{- '<ul>' -}}{%- endif -%}
          {%- set s = devices|selectattr('id','==',i)|list -%}
          {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
            {%- set s = s|first -%}
            <li><a href="/config/devices/device/{{- s.did -}}">{{- s.friendly_name -}}</a> in <a href="/config/areas/area/{{- s.area -}}">{{- s.area -}}</a></li>
          {%- endif -%}
          {%- if loop.last -%}{{- '</ul>' -}}{%- endif -%}
        {%- endfor -%}
        {#- from unavailable -#}
        {%- for i in ids -%}
          {%- if loop.first -%}<ul>{%- endif -%}
          {{- '<li>' -}}
          {%- set d = state_attr('binary_sensor.motion_device_class','devices') -%}
          {%- if d|lower != 'none' and not d is string and d is iterable and d|count > 0 -%}
            {%- set d = d|selectattr('id','==',i)|default(['none'])|first -%}
            {%- if d|lower != 'none' and 'did' in d -%}
              <a href="/config/devices/device/{{- d.did -}}">{{- d.friendly_name -}}</a>
            {%- else -%}{{- i -}}{%- endif -%}
          {%- else -%}{{- i -}}{%- endif -%}
          {%- for j in details|map(attribute='class')|sort|unique|list
              if state_attr('binary_sensor.motion_device_' + j|string ,'activity')|lower != 'none'
                and state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('id','==',i)|lower != 'none'
                and state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('id','==',i)|list|count > 0 -%}
            {%- if loop.first -%}<ul>{%- endif -%}
            {%- set u = state_attr('binary_sensor.motion_device_' + j|string ,'activity')|selectattr('id','==',i)|list -%}
            {%- set c = u|count -%}
            {%- set o = u|map(attribute='updated')|min|as_datetime|relative_time -%}
            {{- '<li><i>' -}}
            {{ c|default(0) }} {{ j }} sensor(s); {{ o|default('unknown') }} ago
            {{- '</i></li>' -}}
            {%- if loop.last -%}</ul>{%- endif -%}
          {%- endfor -%}
          {%- if loop.last -%}</ul>{%- endif -%}
        {%- endfor -%}
      {%- else -%}<b>No device activity</b>{%- endif %}
    last: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','last') }}
    active: >-
      {{ details|count|int(0) > 0 }}
  action:
    - alias: 'update binary_sensor.motion_device_class_activity'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_activity
        last: >-
          {% if active|lower == 'true' %}{{ utcnow().timestamp() }}{% else %}{{ last }}{% endif %}
        occupancy: >-
          {{ occupancy }}
        ids: >-
          {{ ids }}
        markdown: >-
          {{ markdown }}
        details: >-
          {{ details }}
        state: >-
          {% if active|lower == 'true' %}on{% else %}off{% endif %}

###

- id: motion_device_class_activity_on
  alias: motion_device_class_activity_on
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      to: 'on'
  action:
    - alias: 'trigger device_class_activity_notify'
      service: automation.trigger
      entity_id: automation.motion_device_class_activity_notify

- id: motion_device_class_activity_response
  alias: motion_device_class_activity_response
  mode: single
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-activity-wait"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-activity-help"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-activity-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-activity-approve"
  variables:
    origin: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.origin|default(none) }}
      {% else %}none{% endif %}
    time_fired: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.time_fired|default(none) }}
      {% else %}none{% endif %}
    context: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.context }}
      {% else %}none{% endif %}
    responses: >-
      {%- set response = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_activity','responses') -%}
      {%- if s|lower != 'none' -%}
        {%- set response = s -%}
      {%- endif -%}
      {{- responses -}}
    actions: >-
      {%- set actions = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_activity','actions') -%}
      {%- if s|lower != 'none' and 'id' in s -%}
        {%- set actions = s -%}
      {%- endif -%}
      {{- actions -}}
    response: >-
      {% if trigger|lower != 'none' and actions|lower != 'none' %}
        {{ trigger.event.data.action|default(none)|string|replace(actions.id|string + '-','') }}
      {% else %}
        {{- state_attr('binary_sensor.motion_device_class_activity','response') -}}
      {% endif %}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('input_select.motion_log_level') in ['debug','info'] }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Device activity response
                notification_id: >-
                  {{ 'device-activity-response' }}
                message: >-
                  Response <b>received</b>: "{{ response -}}"; context: {{ context|string -}}; at: {{ time_fired }}
    - choose:
        - alias: 'test if response in responses'
          conditions:
            - condition: template
              value_template: >
                {{ response|lower in responses }}
          sequence:
            - alias: 'set device_class_activity: timestamp, when'
              variables:
                timestamp: >-
                  {{ utcnow().timestamp() }}
                when: >-
                  {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
                response: >-
                  {{ response }}
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states('input_select.motion_log_level') in ['debug','info','notice','alert','critical'] }}
                  sequence:
                    - service: persistent_notification.create
                      data_template:
                        title: >-
                          ALERT: Activity device updated
                        notification_id: >-
                          {{ 'device-activity-response' }}
                        message: >-
                          Activity device <b>updated</b> to <code>{{- response -}}</code> at <i>{{- when -}}</i>
            - alias: 'set sensor.motion_restart_notify to new state w/ timestamp, when'
              service: python_script.set_state
              data_template:
                entity_id: binary_sensor.motion_device_class_activity
                timestamp: >-
                  {{ timestamp }}
                when: >-
                  {{ when }}
                response: >-
                  {{ response }}

##

- id: motion_device_class_activity_approve
  alias: motion_device_class_activity_approve
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'approve'
  variables:
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    response: >-
      {{ 'approve' }}
    actions: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','actions') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('input_select.motion_log_level') in ['debug','info'] }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Activity device: {{ response }}
                notification_id: >-
                  {{ 'device-activity-response' }}
                message: >-
                  Activity device response: "{{- response -}}" at <i>{{- when -}}</i>

- id: motion_device_class_activity_deny
  alias: motion_device_class_activity_deny
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'deny'
  variables:
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    response: >-
      {{ 'deny' }}
    actions: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','actions') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('input_select.motion_log_level') in ['debug','info'] }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Activity device: {{ response }}
                notification_id: >-
                  {{ 'device-activity-response' }}
                message: >-
                  Activity device response: "{{- response -}}" at <i>{{- when -}}</i>

- id: motion_device_class_activity_wait
  alias: motion_device_class_activity_wait
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'wait'
  variables:
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    response: >-
      {{ 'wait' }}
    actions: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','actions') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('input_select.motion_log_level') in ['debug','info'] }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Activity device: {{ response }}
                notification_id: >-
                  {{ 'device-activity-response' }}
                message: >-
                  Activity device response: "{{- response -}}" at <i>{{- when -}}</i>

- id: motion_device_class_activity_help
  alias: motion_device_class_activity_help
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      attribute: 'response'
      to: 'help'
  variables:
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    response: >-
      {{ 'help' }}
    actions: >-
      {{ state_attr('binary_sensor.motion_device_class_activity','actions') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('input_select.motion_log_level') in ['debug','info'] }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Activity device: {{ response }}
                notification_id: >-
                  {{ 'device-activity-response' }}
                message: >-
                  Activity device response: "{{- response -}}" at <i>{{- when -}}</i>
