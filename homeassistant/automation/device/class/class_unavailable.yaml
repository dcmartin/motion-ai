###
# homeassistant/automation/device/class/class_unavailable.yaml
###

## reload integration

- id: motion_device_class_unavailable_reload_config_dismiss
  alias: motion_device_class_unavailable_reload_config_dismiss
  mode: 'single'
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_class_unavailable
      to: 'off'
  action:
    - alias: 'dismiss notification'
      service: persistent_notification.dismiss
      data_template:
        notification_id: >
          {{- 'info-device-class-unavailable-reload' -}}

- id: motion_device_class_unavailable_reload_config
  alias: motion_device_class_unavailable_reload_config
  mode: 'single'
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_class_unavailable
      to: 'on'
      for:
        hours: 4
  variables:
    devices: >-
      {% set devices = state_attr('binary_sensor.motion_device_class_unavailable','dids') -%}
      {{ devices }}
    names: >-
      {%- set names = devices|map('device_attr','name')|list  -%}
      {{ names }}
    areas: >-
      {%- set areas = devices|map('device_attr','area_id')|list  -%}
      {{ areas }}
  action:
    - alias: 'test if any devices are unavailable'
      condition: template
      value_template: >
        {{ devices|lower != 'none' and not devices is string and devices is iterable and devices|count > 0 }}
    - alias: 'call homeassistant.reload_config_entry for all device ids'
      service: homeassistant.reload_config_entry
      data_template:
        device_id: >-
          {{ devices }}
    - alias: 'test log_level'
      condition: template
      value_template: >
        {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','notice') }}
    - alias: 'create notification'
      service: persistent_notification.create
      data_template:
        title: >-
          NOTICE: Reloaded unavailable device(s)
        notification_id: >
          {{- 'info-device-class-unavailable-reload' -}}
        message: >-
          {% set icon = 'unavailable-icon' %}
          {{- '<img src="/local/images/icons/' + icon + '.png?v1">' -}}<br>
          There are {{ devices|count }} <a href="/notify-unavailable/all">unavailable</a> devices; the following <a href="/config/integrations">integration(s)</a> have been reloaded:
          {%- for i in devices -%}
            {%- if loop.first -%}{{- '<ol>' -}}{%- endif -%}
            <li><a href="/config/devices/device/{{- i -}}">{{- names[loop.index-1] -}}</a> in <a href="/config/areas/area/{{- areas[loop.index-1] -}}">{{ areas[loop.index-1] }}
 ({{- i -}})</li>
            {%- if loop.last -%}{{- '</ol>' -}}{%- endif -%}
          {%- endfor -%}
          <br><i>Last updated</i>: {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}

## rescan_unavailable

- id: motion_device_class_unavailable
  alias: motion_device_class_unavailable
  mode: 'restart'
  max_exceeded: 'warn'
  initial_state: 'on'
  trigger:
    - platform: time_pattern
      minutes: /15
    - platform: 'state'
      entity_id: 'binary_sensor.motion_device_class'
      for:
        minutes: 5
    - platform: 'state'
      entity_id: 'group.motion_device_class_unavailable'
      attribute: 'entity_id'
      for:
        minutes: 1
    - platform: 'state'
      entity_id: 'group.motion_device_class_unavailable'
      to:
        - 'on'
        - 'off'
      for:
        seconds: 30
  variables:
    unavailable: >-
      {%- set s = state_attr('group.motion_device_class_unavailable','entity_id') -%}
      {%- if s|lower != 'none' and not s is string and s is iterable -%}
      [{%- for i in s if is_state(i,'on') -%}
        {%- set l = loop %}
        {%- for j in state_attr(i|replace('_unavailable',''),'unavailable') -%}
          {%- set name = device_attr(j.did,'name_by_user') -%}{%- if name|lower == 'none' -%}{%- set name = device_attr(j.did,'name') -%}{%- endif -%}
          {# no quotations; not a real ID #}
          {%- set name = name|replace('\'','') -%}
          {"did":"{{- j.did -}}","area":"{{- area_id(j.entity_id) -}}","entity_id":"{{- j.entity_id -}}","id":"{{- name -}}","class":"{{- state_attr(j.entity_id,'device_class') -}}"}
          {%- if not loop.last -%},{%- endif -%}
        {%- else -%}None{%- endfor -%}
        {%- if not loop.last -%},{%- endif -%}
      {%- endfor -%}]
      {%- else -%}[]{%- endif -%}
    categorys: >-
      {% set categorys = none %}
      {% if unavailable|lower != 'none' and unavailable is iterable and unavailable|count > 0 %}
        {% set categorys = unavailable|reject('none')|map(attribute='class')|sort|unique|list %}
      {% endif %}
      {{ categorys }}
    dids: >-
      {% set dids = none %}
      {% if unavailable|lower != 'none' and unavailable is iterable and unavailable|count > 0 %}
        {% set dids = unavailable|reject('none')|map(attribute='did')|sort|unique|list %}
      {% endif %}
      {{ dids }}
    count: >-
      {% set count = none %}
      {% if categorys|lower != 'none' and categorys is iterable and categorys|count > 0 %}
        {% set count = categorys|count %}
      {% endif %}
      {{ count }}
    last: >-
      {% set last = state_attr('binary_sensor.motion_device_class_unavailable','last') %}
      {% if count|int(0) > 0 %}{{ last }}{% else %}{{ utcnow().timestamp() }}{% endif %}
    state: >-
      {% if count|int(0) > 0 %}on{% else %}off{% endif %}
    markdown: >-
      {% set s = dids -%}
      {%- if s|lower != 'none' and not s is string and s is iterable -%}
        <a href="/notify-unavailable/"><h2>Unavailable devices</h2></a>
        {%- for i in s -%}
          {%- if loop.first -%}<ol>{%- endif -%}
          {%- set k = unavailable|selectattr('did','==',i)|list -%}
          {%- if k|lower != 'none' and not k is string and k is iterable and k|count > 0 -%}
            {%- set k = k|first -%}
            {%- if k|lower != 'none' and k is iterable and 'area' in k and 'class' in k -%}
              {%- set area = state_attr('sensor.motion_areas','areas')|selectattr('id','==',k.area)|list -%}
              {%- if area|lower != 'none' and not area is string and area is iterable and area|count > 0 -%}
                {%- set area = area|map(attribute='name')|first -%}
              {%- else -%}
                {%- set area = 'unknown' -%}
              {%- endif -%}
              <li>The <a href="/config/devices/device/{{- k.did -}}">{{- k.id -}}</a> device ({{- device_attr(k.did,'manufacturer')  }} {{ device_attr(k.did,'model') -}}) in <a href="/config/areas/area/{{- k.area -}}">{{ area }}</a> has unavailable sensors in the following categories:
              {%- for c in unavailable|selectattr('did','==',i)|map(attribute='class')|sort|unique|list -%}
                {%- if loop.first -%}<ul>{%- endif -%}
                <li><a href="/notify-devices/{{- c -}}">{{- c -}}</a></li>
                {%- if loop.last -%}</ul>{%- endif -%}
              {%- endfor -%}
              </li>
            {%- endif -%}
          {%- endif -%}
          {%- if loop.last -%}</ol>{%- endif -%}
        {%- endfor -%}
      {%- else -%}<h2>No unavailable devices</h2>{%- endif -%}
      <br><b>Alarms enabled</b>: <code>{{- state_attr('binary_sensor.motion_device_class_unavailable_exist','alarm')|lower == 'on' }}</code>
      <br><b>Outstanding alarms</b>: <code>{{- count -}}</code>
      <br><i>Last updated</i>: {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    details: >-
      {% set s = unavailable -%}
      {%- if s|lower != 'none' and not s is string and s is iterable -%}
        {%- for i in s if i is iterable and 'entity_id' in i -%}
          {%- if not loop.first -%},{%- else -%}{{- '{' -}}{%- endif -%}
          "{{- state_attr(i.entity_id,'friendly_name') -}}":"{{- states[i.entity_id].last_updated|relative_time -}}"
          {%- if loop.last -%}{{- '}' -}}{%- endif -%}
        {%- endfor -%}
      {%- else -%}none{%- endif -%}
  action:
    - alias: 'update binary_sensor.motion_device_class_unavailable'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_unavailable
        last: >-
          {{ last }}
        categorys: >-
          {{ categorys }}
        dids: >-
          {{ dids }}
        count: >-
          {{ count }}
        markdown: >-
          {{ markdown }}
        details: >-
          {{ details }}
        status: >-
          {{ unavailable }}
        state: >-
          {{ state }}
    - alias: 'update binary_sensor.motion_device_class: unavailable'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class
        unavailable: >-
          {{ unavailable }}

- id: motion_device_class_unavailable_alarm_off
  alias: motion_device_class_unavailable_alarm_off
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    unavailable: >-
      {% set unavailable = state_attr('binary_sensor.motion_device_class_unavailable','categorys') %}
      {{ unavailable }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_unavailable_dismiss_all' }}
    - condition: template
      value_template: >
        {{ unavailable|lower != 'none' and not unavailable is string and unavailable is iterable and unavailable|count > 0 }}
    - alias: 'alarm_off unavailable device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = unavailable[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = unavailable[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_alarm_off' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ 'automation.motion_device_' + which|string + '_unavailable_dismiss' }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                {% set s = unavailable[repeat.index-1] %}
                DEBUG: Require OFF: {{ s }}
              notification_id: >
                {{- 'debug-device-class-unavailable-actions' -}}
              message: >-
                {% set s = unavailable[repeat.index-1] %}
                Class {{ s }} is no longer alarm; automation: {{ automation }}

- id: motion_device_class_unavailable_required_off
  alias: motion_device_class_unavailable_required_off
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    unavailable: >-
      {% set unavailable = state_attr('binary_sensor.motion_device_class_unavailable','categorys') %}
      {{ unavailable }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_unavailable_dismiss' }}
    - condition: template
      value_template: >
        {{ unavailable|lower != 'none' and not unavailable is string and unavailable is iterable and unavailable|count > 0 }}
    - alias: 'required_off unavailable device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = unavailable[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = unavailable[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_required_off' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ 'automation.motion_device_' + which|string + '_unavailable_dismiss' }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                {% set s = unavailable[repeat.index-1] %}
                DEBUG: Require OFF: {{ s }}
              notification_id: >
                {{- 'debug-device-class-unavailable-actions' -}}
              message: >-
                {% set s = unavailable[repeat.index-1] %}
                Class {{ s }} is no longer required; automation: {{ automation }}
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_unavailable_rescan' }}

- id: motion_device_class_unavailable_dismiss_all
  alias: motion_device_class_unavailable_dismiss_all
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    unavailable: >-
      {% set unavailable = state_attr('binary_sensor.motion_device_class_unavailable','categorys') %}
      {{ unavailable }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_unavailable_dismiss' }}
    - condition: template
      value_template: >
        {{ unavailable|lower != 'none' and not unavailable is string and unavailable is iterable and unavailable|count > 0 }}
    - alias: 'dismiss all unavailable device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = unavailable[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = unavailable[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_unavailable_dismiss' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Dismiss unavailable alarm: {{ which }} 
                      notification_id: >
                        {{- 'debug-device-class-unavailable-actions' -}}
                      message: >-
                        Dismiss all {{ which }} unavailable notifications

##

#- id: motion_device_class_unavailable_off
#  alias: motion_device_class_unavailable_off
#  mode: single
#  initial_state: 'on'
#  trigger:
#    platform: state
#    entity_id: binary_sensor.motion_device_class_unavailable
#    to: 'off'
#  action:
#    - alias: 'trigger device_class_unavailable_dismiss'
#      service: automation.trigger
#      entity_id: automation.motion_device_class_unavailable_dismiss
#
#- id: motion_device_class_unavailable_on
#  alias: motion_device_class_unavailable_on
#  mode: single
#  initial_state: 'on'
#  trigger:
#    platform: state
#    entity_id: binary_sensor.motion_device_class_unavailable
#    to: 'on'
#  action:
#    - alias: 'trigger device_class_unavailable_notify'
#      service: automation.trigger
#      entity_id: automation.motion_device_class_unavailable_notify

## responses

- id: motion_device_class_unavailable_responses
  alias: motion_device_class_unavailable_responses
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_alarm_unavailable'
      to: 'on'
  variables:
    responses: >-
      {% set responses = state_attr('binary_sensor.motion_device_class_unavailable_exist','responses') %}
      {{ responses }}
  condition:
    - alias: 'test if responses are valid'
      condition: template
      value_template: >
        {{ responses|lower != 'none' and not responses is string and responses is iterable and responses|count > 0 }}
  action:
    - alias: 'enable or disable response trigger automations'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = responses[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = responses[repeat.index-1] %}
                {{ which|string }}
              automation: >-
                {% set automation = 'automation.motion_device_class_unavailable_' + which %}
                {{ automation }}
              trigger: >-
                {% set s = responses[repeat.index-1] %}
                {% set a = state_attr('binary_sensor.motion_device_class_unavailable_exist',which) %}
                {% set trigger = a.trigger|default(none) %}
                {{ trigger }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower != 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'off') }}
                sequence:
                  - service: automation.turn_on
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower == 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'on') }}
                sequence:
                  - service: automation.turn_off
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Unavailable: {{ which }}
                      notification_id: >-
                        {{ 'device-class-unavailable-responses' }}
                      message: >-
                        Response: {{ which -}}; trigger: {{ trigger -}}; automation: {{ automation }}

- id: motion_device_class_unavailable_response
  alias: motion_device_class_unavailable_response
  mode: single
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-unavailable-wait"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-unavailable-help"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-unavailable-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-unavailable-approve"
  variables:
    origin: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.origin|default(none) }}
      {% else %}none{% endif %}
    time_fired: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.time_fired|default(none) }}
      {% else %}none{% endif %}
    context: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.context }}
      {% else %}none{% endif %}
    responses: >-
      {%- set responses = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_unavailable_exist','responses') -%}
      {%- if s|lower != 'none' -%}
        {%- set responses = s -%}
      {%- endif -%}
      {{- responses -}}
    actions: >-
      {%- set actions = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_unavailable_exist','actions') -%}
      {%- if s|lower != 'none' and 'id' in s -%}
        {%- set actions = s -%}
      {%- endif -%}
      {{- actions -}}
    response: >-
      {% if trigger|lower != 'none' and actions|lower != 'none' %}
        {{ trigger.event.data.action|default(none)|string|replace(actions.id|string + '-','') }}
      {% else %}
        {{- state_attr('binary_sensor.motion_device_class_unavailable','response') -}}
      {% endif %}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device unavailable response
                notification_id: >-
                  {{ 'device-class-unavailable-response' }}
                message: >-
                  Response <b>received</b>: "{{ response -}}"; context: {{ context|string -}}; at: {{ time_fired }}
    - choose:
        - alias: 'test if response in responses'
          conditions:
            - condition: template
              value_template: >
                {{ response|lower in responses }}
          sequence:
            - alias: 'set device_class_unavailable: timestamp, when'
              variables:
                timestamp: >-
                  {{ utcnow().timestamp() }}
                when: >-
                  {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
                response: >-
                  {{ response }}
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
                  sequence:
                    - service: persistent_notification.create
                      data_template:
                        title: >-
                          INFO: Unavailable device updated
                        notification_id: >-
                          {{ 'device-class-unavailable-response' }}
                        message: >-
                          Unavailable device <b>updated</b> to <code>{{- response -}}</code> at <i>{{- when -}}</i>
            - alias: 'set binary_sensor.motion_device_class_unavailable: timestamp, when, response'
              service: python_script.set_state
              data_template:
                entity_id: binary_sensor.motion_device_class_unavailable
                timestamp: >-
                  {{ timestamp }}
                when: >-
                  {{ when }}
                response: >-
                  {{ response }}

##

- id: motion_device_class_unavailable_approve
  alias: motion_device_class_unavailable_approve
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_unavailable'
      attribute: 'response'
      to: 'approve'
  variables:
    response: >-
      {% set response = 'approve' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_unavailable_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device unavailable: {{ response }}
                notification_id: >-
                  {{ 'device-class-unavailable-response' }}
                message: >-
                  Device unavailable response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for unavailable approve'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_unavailable_deny
  alias: motion_device_class_unavailable_deny
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_unavailable'
      attribute: 'response'
      to: 'deny'
  variables:
    response: >-
      {% set response = 'deny' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_unavailable_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device unavailable: {{ response }}
                notification_id: >-
                  {{ 'device-class-unavailable-response' }}
                message: >-
                  Device unavailable response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for unavailable deny'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_unavailable_wait
  alias: motion_device_class_unavailable_wait
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_unavailable'
      attribute: 'response'
      to: 'wait'
  variables:
    response: >-
      {% set response = 'wait' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_unavailable_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device unavailable: {{ response }}
                notification_id: >-
                  {{ 'device-class-unavailable-response' }}
                message: >-
                  Device unavailable response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for unavailable wait'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_unavailable_help
  alias: motion_device_class_unavailable_help
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_unavailable'
      attribute: 'response'
      to: 'help'
  variables:
    response: >-
      {% set response = 'help' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_unavailable_exist','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device unavailable: {{ response }}
                notification_id: >-
                  {{ 'device-class-unavailable-response' }}
                message: >-
                  Device unavailable response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for unavailable help'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}
