###
# homeassistant/automation/device/class/class_missing.yaml
###

- id: motion_device_class_missing_required_off
  alias: motion_device_class_missing_required_off
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    missing: >-
      {% set missing = state_attr('binary_sensor.motion_device_class','missing') %}
      {{ missing }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_missing_dismiss' }}
    - condition: template
      value_template: >
        {{ missing|lower != 'none' and not missing is string and missing is iterable and missing|count > 0 }}
    - alias: 'required_off missing device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = missing[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = missing[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_required_off' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ 'automation.motion_device_' + which|string + '_missing_dismiss' }}
          - condition: template
            value_template: >
              {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          - service: persistent_notification.create
            data_template:
              title: >-
                {% set s = missing[repeat.index-1] %}
                DEBUG: Require OFF: {{ s }}
              notification_id: >
                {{- 'debug-device-class-missing-actions' -}}
              message: >-
                {% set s = missing[repeat.index-1] %}
                Class {{ s }} is no longer required; automation: {{ automation }}
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_missing_rescan' }}

- id: motion_device_class_missing_dismiss_all
  alias: motion_device_class_missing_dismiss_all
  mode: single
  initial_state: 'on'
  trigger:
  variables:
    missing: >-
      {% set missing = state_attr('binary_sensor.motion_device_class','missing') %}
      {{ missing }}
  action:
    - service: automation.trigger
      data_template:
        entity_id: >-
          {{ 'automation.motion_device_class_missing_dismiss' }}
    - condition: template
      value_template: >
        {{ missing|lower != 'none' and not missing is string and missing is iterable and missing|count > 0 }}
    - alias: 'dismiss all missing device class(s)'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = missing[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = missing[repeat.index-1] %}
                {{ which }}
              automation: >-
                {% set automation = 'automation.motion_device_' + which|string + '_missing_dismiss' %}
                {{ automation }}
          - service: automation.trigger
            data_template:
              entity_id: >-
                {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Dismiss missing alarm: {{ which }} 
                      notification_id: >
                        {{- 'debug-device-class-missing-actions' -}}
                      message: >-
                        Dismiss all {{ which }} missing notifications 

##

- id: motion_device_class_missing_off
  alias: motion_device_class_missing_off
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_missing
    to: 'off'
  action:
    - alias: 'trigger device_class_missing_dismiss'
      service: automation.trigger
      entity_id: automation.motion_device_class_missing_dismiss

- id: motion_device_class_missing_on
  alias: motion_device_class_missing_on
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_missing
    to: 'on'
  action:
    - alias: 'trigger automation.motion_device_class_missing_notify'
      service: automation.trigger
      entity_id: automation.motion_device_class_missing_notify

- id: motion_device_class_missing_responses
  alias: motion_device_class_missing_responses
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_alarm_missing
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_device_class_missing
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_device_class_missing_exist
      attribute: 'responses'
  variables:
    responses: >-
      {% set responses = state_attr('binary_sensor.motion_device_class_missing_exist','responses') %}
      {{ responses }}
  condition:
    - alias: 'test if responses are valid'
      condition: template
      value_template: >
        {{ responses|lower != 'none' and not responses is string and responses is iterable and responses|count > 0 }}
  action:
    - alias: 'enable or disable response trigger automations'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = responses[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              which: >-
                {% set which = responses[repeat.index-1] %}
                {{ which|string }}
              automation: >-
                {% set automation = 'automation.motion_device_class_missing_' + which %}
                {{ automation }}
              trigger: >-
                {% set s = responses[repeat.index-1] %}
                {% set a = state_attr('binary_sensor.motion_device_class_missing_exist',which) %}
                {% set trigger = a.trigger|default(none) %}
                {{ trigger }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower != 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'off') }}
                sequence:
                  - service: automation.turn_on
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger|lower == 'none' }}
                  - condition: template
                    value_template: >
                      {{ is_state(automation,'on') }}
                sequence:
                  - service: automation.turn_off
                    data_template:
                      entity_id: >-
                        {{ automation }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
                sequence:
                  - service: persistent_notification.create
                    data_template:
                      title: >-
                        DEBUG: Missing response: {{ which }}
                      notification_id: >-
                        {{ 'device-class-missing-responses' }}
                      message: >-
                        Response: {{ which -}}; trigger: {{ trigger -}}; automation: {{ automation }}

- id: motion_device_class_missing_response
  alias: motion_device_class_missing_response
  mode: single
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-missing-wait"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-missing-help"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-missing-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "device-class-missing-approve"
  variables:
    origin: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.origin|default(none) }}
      {% else %}none{% endif %}
    time_fired: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.time_fired|default(none) }}
      {% else %}none{% endif %}
    context: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.context }}
      {% else %}none{% endif %}
    responses: >-
      {%- set responses = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_missing_exist','responses') -%}
      {%- if s|lower != 'none' -%}
        {%- set responses = s -%}
      {%- endif -%}
      {{- responses -}}
    actions: >-
      {%- set actions = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class_missing','actions') -%}
      {%- if s|lower != 'none' and 'id' in s -%}
        {%- set actions = s -%}
      {%- endif -%}
      {{- actions -}}
    response: >-
      {% if trigger|lower != 'none' and actions|lower != 'none' %}
        {{ trigger.event.data.action|default(none)|string|replace(actions.id|string + '-','') }}
      {% else %}
        {{- state_attr('binary_sensor.motion_device_class_missing','response') -}}
      {% endif %}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device missing response
                notification_id: >-
                  {{ 'device-class-missing-response' }}
                message: >-
                  Response <b>received</b>: "{{ response -}}"; context: {{ context|string -}}; at: {{ time_fired }}
    - choose:
        - alias: 'test if response in responses'
          conditions:
            - condition: template
              value_template: >
                {{ response|lower in responses }}
          sequence:
            - alias: 'set device_class_missing: timestamp, when'
              variables:
                timestamp: >-
                  {{ utcnow().timestamp() }}
                when: >-
                  {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
                response: >-
                  {{ response }}
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
                  sequence:
                    - service: persistent_notification.create
                      data_template:
                        title: >-
                          INFO: Device missing updated
                        notification_id: >-
                          {{ 'device-class-missing-response' }}
                        message: >-
                          Device missing <b>updated</b> to <code>{{- response -}}</code> at <i>{{- when -}}</i>
            - alias: 'set binary_sensor.motion_device_class_missing: timestamp, when, response'
              service: python_script.set_state
              data_template:
                entity_id: binary_sensor.motion_device_class_missing
                timestamp: >-
                  {{ timestamp }}
                when: >-
                  {{ when }}
                response: >-
                  {{ response }}

##

- id: motion_device_class_missing_approve
  alias: motion_device_class_missing_approve
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_missing'
      attribute: 'response'
      to: 'approve'
  variables:
    response: >-
      {% set response = 'approve' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_missing','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device missing: {{ response }}
                notification_id: >-
                  {{ 'device-class-missing-response' }}
                message: >-
                  Device missing response: "{{- response -}}" at <i>{{- when -}}</i>;  Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for missing approve'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_missing_deny
  alias: motion_device_class_missing_deny
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_missing'
      attribute: 'response'
      to: 'deny'
  variables:
    response: >-
      {% set response = 'deny' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_missing','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device missing: {{ response }}
                notification_id: >-
                  {{ 'device-class-missing-response' }}
                message: >-
                  Device missing response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for missing deny'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_missing_wait
  alias: motion_device_class_missing_wait
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_missing'
      attribute: 'response'
      to: 'wait'
  variables:
    response: >-
      {% set response = 'wait' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_missing','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device missing: {{ response }}
                notification_id: >-
                  {{ 'device-class-missing-response' }}
                message: >-
                  Device missing response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'trigger automation for missing wait'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_missing_help
  alias: motion_device_class_missing_help
  mode: single
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_missing'
      attribute: 'response'
      to: 'help'
  variables:
    response: >-
      {% set response = 'help' %}
      {{ response }}
    actions: >-
      {% set actions = state_attr('binary_sensor.motion_device_class_missing','actions') %}
      {{ actions }}
    function: >-
      {%- set function = 'none' -%}
      {%- if actions|lower != 'none' and 'actions' in actions -%}
        {%- set s = actions.actions|selectattr('id','==',response)|list -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- set s = s|first -%}
          {%- set function = s.trigger|default('none') -%}
        {%- endif -%}
      {%- endif -%}
      {{- function -}}
    timestamp: >-
      {{ utcnow().timestamp() }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Device missing: {{ response }}
                notification_id: >-
                  {{ 'device-class-missing-response' }}
                message: >-
                  Device missing response: "{{- response -}}" at <i>{{- when -}}</i>; Trigger: {{ function }}
    - alias: 'function not none'
      condition: template
      value_template: >-
        {{ function|lower != 'none' }}
    - alias: 'function automation for missing help'
      service: automation.trigger
      data_template:
        entity_id: >-
          {{ function }}

- id: motion_device_class_missing_exist
  alias: motion_device_class_missing_exist
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_class
      attribute: 'alarm'
      not_to:
        - 'none'
        - 'unknown'
      for:
        seconds: 10
    - platform: state
      entity_id: binary_sensor.motion_device_class
      attribute: 'missing'
      not_to:
        - 'none'
        - 'unknown'
      for:
        seconds: 10
    - platform: state
      entity_id: 'sensor.motion_role_primary'
      not_to:
        - 'none'
        - 'unknown'
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - alias: 'test if binary_sensor.motion_device_class is not unknown'
        condition: template
        value_template: >-
          {{ not is_state('binary_sensor.motion_device_class','unknown') }}
  variables:
    primary: >-
      {%- set primary = state_attr('sensor.motion_role_primary','friendly_name') -%}
      {{ primary }}
    alarm: >-
      {% set s = state_attr('binary_sensor.motion_device_class','alarm') -%}
      {%- if s|lower != 'none' -%}
        {%- if 'missing' in s -%}on{%- else -%}none{%- endif -%}
      {%- else -%}none{%- endif %}
    approve: >-
      {%- set approve = {'title':'Rescan all','icon':'mdi:home-search-outline','symbol':'sfsymbols:house.circle','trigger':'automation.motion_device_class_rescan_all'} -%}
      {{ approve }}
    deny: >-
      {%- set deny = {'title':'Require off','icon':'mdi:bell-cancel-outline','symbol':'sfsymbols:bell.slash.circle','trigger':'automation.motion_device_class_missing_required_off'} -%}
      {{ deny }}
    wait: >-
      {%- set wait = {'title':'Dismiss all','icon':'mdi:bell-sleep-outline','symbol':'sfsymbols:bell.slash','trigger':'automation.motion_device_class_missing_dismiss_all'} -%}
      {{ wait }}
    help: >-
      {%- set s = primary -%}
      {%- if s|lower != 'none' -%}
        {%- set help = {'title':'Notify ' + s|string,'icon':'mdi:message-alert','symbol':'sfsymbols:message','trigger':'automation.motion_notification_missing_help'} -%}
      {%- else -%}
        {%- set help = {'title':'No primary','icon':'mdi:message-alert','symbol':'sfsymbols:message','trigger':'automation.motion_notification_missing_help'} -%}
      {%- endif -%}
      {{ help }}
    responses: >-
      {%- set responses = ['approve','deny','wait','help'] -%}
      {{ responses }}
    state: >-
      {% set s = state_attr('binary_sensor.motion_device_class','missing') %}
      {%- if s|lower != 'none' and s is iterable -%}
        {%- if s|count > 0 -%}on{%- else -%}off{%- endif -%}
      {%- else -%}off{%- endif -%}
  action:
    - alias: 'update binary_sensor.motion_device_class_missing_exist'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_missing_exist
        primary: >-
          {{ primary }}
        alarm: >-
          {{ alarm }}
        approve: >-
          {{ approve }}
        deny: >-
          {{ deny }}
        wait: >-
          {{ wait }}
        help: >-
          {{ help }}
        state: >-
          {{ state }}

- id: motion_device_class_missing
  alias: motion_device_class_missing
  mode: single
  initial_state: 'on'
  trigger:
    - platform: time_pattern
      minutes: /2
    - platform: state
      entity_id: binary_sensor.motion_device_class
      attribute: 'missing'
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - alias: 'test if binary_sensor.motion_device_class is not unknown'
        condition: template
        value_template: >-
          {{ not is_state('binary_sensor.motion_device_class','unknown') }}
  variables:
    actions: >-
      {%- set id = 'device-class-missing' -%}
      {%- set approve = state_attr('binary_sensor.motion_device_class_missing_exist','approve') -%}
      {%- set deny = state_attr('binary_sensor.motion_device_class_missing_exist','deny') -%}
      {%- set wait = state_attr('binary_sensor.motion_device_class_missing_exist','wait') -%}
      {%- set help = state_attr('binary_sensor.motion_device_class_missing_exist','help') -%}
      {%- set group = state_attr('binary_sensor.motion_device_class_missing_exist','group') -%}
      {%- set primary = state_attr('binary_sensor.motion_device_class_missing_exist','primary') -%}
      {%- set interval = state_attr('binary_sensor.motion_device_class_missing_exist','interval') -%}
      {%- set responses = state_attr('binary_sensor.motion_device_class_missing_exist','responses') -%}
      {%- set a = [
        {'id':'approve','action': id|string + '-approve','icon': approve.icon|default('mdi:cancel')|string,'symbol': approve.symbol|default('')|string,'title': approve.title|default('')|string,'destructive':false,'trigger': approve.trigger|default('none')},
        {'id':'deny','action': id|string + '-deny','icon': deny.icon|default('mdi:cancel')|string,'symbol': deny.symbol|default('')|string,'title': deny.title|default('')|string,'destructive':true,'trigger': deny.trigger|default('none')},
        {'id':'wait','action': id|string + '-wait','icon': wait.icon|default('mdi:cancel')|string,'symbol': wait.symbol|default('')|string,'title': wait.title|default('')|string,'destructive':false,'trigger': wait.trigger|default('none')},
        {'id':'help','action': id|string + '-help','icon': help.icon|default('mdi:cancel')|string,'symbol': help.symbol|default('')|string,'title': help.title|default('')|string,'destructive':false,'trigger': help.trigger|default('none')}
        ] -%}
      {"id":"{{- id -}}","group":"{{- group -}}","interval":{{- interval -}},"responses":{{- responses -}},"primary":"{{- primary -}}","actions":{{ a }}}
    count: >-
      {% set s = state_attr('binary_sensor.motion_device_class','missing') %}
      {% if not s is string and s is iterable %}
        {{ s|count }}
      {% else %}none{% endif %}
    markdown: >-
      {%- set count = none -%}
      {%- set s = state_attr('binary_sensor.motion_device_class','missing') -%}
      {%- if not s is string and s is iterable and s|count > 0 -%}
        {%- set count = s|count -%}
        <h2><a href="/notify-missing/">Missing</a> existing device category(s)</h2>
        {%- for i in s %}
          {%- if loop.first -%}<ol>{%- endif -%}
          <li><a href="/notify-devices/{{- i -}}">{{- i|upper -}}</a></li>
          {%- if loop.last -%}</ol>{%- endif -%}
        {%- endfor -%}
      {%- else -%}
        <h2>No missing devices</h2>
      {%- endif %}
      <br><b>Alarms enabled</b>: <code>{{- state_attr('binary_sensor.motion_device_class_missing_exist','alarm')|lower == 'on' }}</code>
      <br><b>Outstanding alarms</b>: <code>{{- count -}}</code>
      <br><i>Last updated</i>: {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    state: >-
      {% if count|lower != 'none' %}
        {%- if count > 0 -%}on{%- else -%}off{%- endif -%}
      {% else %}unknown{% endif %}
  action:
    - alias: 'update binary_sensor.motion_device_class_missing'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_device_class_missing
        actions: >-
          {{ actions }}
        count: >-
          {{ count }}
        markdown: >-
          {{ markdown }}
        state: >-
          {{ state }}

#- id: motion_device_class_missing_rescan
#  alias: motion_device_class_missing_rescan
#  mode: 'restart'
#  max_exceeded: 'warn'
#  initial_state: 'on'
#  trigger:
#    - platform: state
#      entity_id: 'group.motion_device_class_missing'
#      to:
#        - 'on'
#        - 'off'
#  condition:
#    condition: and
#    conditions:
#      - alias: 'test if rescan_all is NOT running'
#        condition: template
#        value_template: >-
#          {{ state_attr('automation.motion_device_class_rescan_all','current') == 0  }}
#      - alias: 'test if rescan is NOT running'
#        condition: template
#        value_template: >-
#          {{ state_attr('automation.motion_device_class_rescan','current') == 0  }}
#  variables:
#    required: >-
#      {%- set required = [] -%}
#      {%- set s = state_attr('binary_sensor.motion_device_class','sensors') -%}
#      {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
#        {%- set required = (required + s)|sort|unique|list -%}
#      {%- endif -%}
#      {%- set s = state_attr('binary_sensor.motion_device_class','binary_sensors') -%}
#      {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
#        {%- set required = (required + s)|sort|unique|list -%}
#      {%- endif -%}
#      {{- required -}}
#    missing: >-
#      {%- set s = required -%}
#      {%- if s|lower != 'none' and s is iterable and s|count > 0 -%}
#      [{%- for i in s if is_state('binary_sensor.motion_device_' + i + '_missing','on') -%}
#        {%- set l = loop -%}
#        {%- for j in state_attr('binary_sensor.motion_device_' + i,'missing') -%}
#          {"did":"{{- device_id(j.entity_id) -}}","entity_id":"{{- j.entity_id -}}","id":"{{- j.id -}}","class":"{{- i -}}"}
#          {%- if not (l.last and loop.last) -%},{%- endif -%}
#        {%- endfor -%}
#      {%- endfor -%}]
#      {%- else -%}[]{%- endif -%}
#  action:
#    - alias: 'update sensor.motion_device_class missing'
#      service: python_script.set_state
#      data_template:
#        entity_id: binary_sensor.motion_device_class
#        missing: >-
#          {{ missing }}

