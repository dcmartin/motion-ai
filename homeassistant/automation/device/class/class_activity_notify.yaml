###
# homeassistant/automation/device/class/class_activity_notify.yaml
###

- id: motion_device_class_activity_on
  alias: motion_device_class_activity_on
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_activity
    to: 'on'
#  condition:
#    condition: and
#    conditions:
#      - condition: template
#        value_template: >
#          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'trigger device_class_activity_notify'
      service: automation.trigger
      entity_id: automation.motion_device_class_activity_notify

- id: motion_device_class_activity_notify
  alias: motion_device_class_activity_notify
  mode: 'single'
  max_exceeded: 'silent'
  initial_state: 'off'
  trigger:
  condition:
    condition: and
    conditions:
      - alias: 'test if devices are unavailable'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_device_class_activity','on') }}
      - alias: 'test activity notification count'
        condition: template
        value_template: >-
          {{ state_attr('binary_sensor.motion_device_class_activity','count')|int(0) > 0  }}
  variables:
    ids: >-
      {% set ids = state_attr('binary_sensor.motion_device_class_activity','ids') %}
      {{ ids }}
    title: >-
      {% set title = states('sensor.motion_app') + ': device(s) activity' %}
      {{ title }}
    notification_id: >-
      {{ 'device-activity-notify' }}
    action: >-
      {%- set action = 'activity-alarm' -%}
      {{- action -}}
    url: >-
      {%- set url = '/notify-activity' -%}
      {{- url -}}
    footer: >-
      <a href="{{- url -}}"><img src="https://img.shields.io/badge/{{- action -}}-yellow.svg"></a>
    icon: >-
      {% set icon = 'notification-device-activity' %}
      {{ icon }}
    header: >-
      {{- '<img src="/local/images/icons/' + icon + '.png?v1">' -}}
    body: >-
      Devices(s) <a href="/notify-activity/">activity</a> at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}:
      {%- set s = state_attr('binary_sensor.motion_device_class_activity','markdown') -%}
      {%- if s|lower != 'none' -%}{{- s -}}{%- endif -%}
    message: >-
      {{- header -}}<hr>{{- body -}}<p>{{- footer -}}
  action:
    - alias: 'notify activity device'
      service: persistent_notification.create
      data_template:
        title: >-
          {{- title -}}
        notification_id: >-
          {{- notification_id -}}
        message: >-
          {{- message -}}

- id: motion_device_class_activity_off
  alias: motion_device_class_activity_off
  mode: single
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_device_class_activity
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'trigger device_class_activity_dismiss'
      service: automation.trigger
      entity_id: automation.motion_device_class_activity_dismiss

- id: motion_device_class_activity_dismiss
  alias: motion_device_class_activity_dismiss
  mode: 'single'
  max_exceeded: 'silent'
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: 'binary_sensor.motion_device_class_activity'
      to: 'off'
  variables:
    notification_id: >-
      {{ 'device-activity-notify' }}
  action:
    - alias: 'dismiss activity device'
      service: persistent_notification.dismiss
      data_template:
        notification_id: >-
          {{- notification_id -}}
