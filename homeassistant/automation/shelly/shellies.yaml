###
# homeassistant/automation/motion/shellies.yaml
###

- id: motion_shellies_automation_enable
  alias: motion_shellies_automation_enable
  initial_state: 'on'
  trigger:
    - platform: template
      value_template: >-
        {% set s = state_attr('group.motion_shellies','entity_id') %}
        {{ s|lower != 'none' and not s is string and s is iterable and s|count > 0 }}
    - platform: state
      entity_id: input_boolean.motion_shellies_enable
      to: 'on'
  variables:
    automations: >-
      {% set automations = [ 'motion_shellies_energy_counter','motion_shellies_energy_end','motion_shellies_energy_group_update','motion_shellies_energy_mqtt_energy','motion_shellies_energy_mqtt_power','motion_shellies_energy_power_off','motion_shellies_energy_start','motion_shellies_energy_state_changed','motion_shellies_light_counter','motion_shellies_light_end','motion_shellies_light_group_update','motion_shellies_light_mqtt_energy','motion_shellies_light_mqtt_power','motion_shellies_light_mqtt_publish_brightness','motion_shellies_light_mqtt_publish_off','motion_shellies_light_mqtt_publish_on','motion_shellies_light_mqtt_state','motion_shellies_light_mqtt_status','motion_shellies_light_power_off','motion_shellies_light_start','motion_shellies_light_state_changed','motion_shellies_moisture_counter','motion_shellies_moisture_end','motion_shellies_moisture_flood','motion_shellies_moisture_group_update','motion_shellies_moisture_start','motion_shellies_occupancy_counter','motion_shellies_occupancy_end','motion_shellies_occupancy_group_update','motion_shellies_occupancy_selected_active','motion_shellies_occupancy_selected_led','motion_shellies_occupancy_selected_location','motion_shellies_occupancy_selected_select','motion_shellies_occupancy_selected_sensitivity','motion_shellies_occupancy_selected_settings_rest','motion_shellies_occupancy_start','motion_shellies_plug_counter','motion_shellies_plug_end','motion_shellies_plug_group_update','motion_shellies_plug_mqtt_energy','motion_shellies_plug_mqtt_power','motion_shellies_plug_mqtt_publish_off','motion_shellies_plug_mqtt_publish_on','motion_shellies_plug_mqtt_state','motion_shellies_plug_mqtt_status','motion_shellies_plug_power_off','motion_shellies_plug_start','motion_shellies_plug_state_changed','motion_shellies_button_event','motion_shellies_mqtt_sensor','motion_shellies_settings_rest','motion_shellies_update_rest','motion_shellies_ota_rest','motion_shellies_mqtt_info','motion_shellies_mqtt_announce','motion_shellies_mqtt_input_event','motion_shellies_mqtt_publish_announce','motion_shellies_mqtt_publish_update','motion_shellies_offline_timeout','motion_shellies_energy_power_off','motion_shellies_light_power_off','motion_shellies_plug_power_off','motion_shellies_settings_login_failure'] %}
      {{ automations }}
  condition:
    - condition: template
      value_template: >-
        {{ is_state('input_boolean.motion_shellies_enable','on') }}
  action:
    - alias: 'enable automations for shellies'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = automations[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              automation: >-
                {% set s = automations[repeat.index-1] %}
                {{ 'automation.' + s|string }}
          - condition: template
            value_template: >-
              {{ states(automation)|lower == 'off' }}
          - alias: 'enable automation'
            service: automation.turn_on
            data_template:
              entity_id: >-
                {{ automation }}

- id: motion_shellies_automation_disable
  alias: motion_shellies_automation_disable
  initial_state: 'on'
  trigger:
    - platform: template
      value_template: >-
        {% set s = state_attr('group.motion_shellies','entity_id') %}
        {{ s|lower == 'none' or s is string or not s is iterable or not s|count > 0 }}
    - platform: state
      entity_id: input_boolean.motion_shellies_enable
      to: 'off'
  variables:
    automations: >-
      {% set automations = [ 'motion_shellies_energy_counter','motion_shellies_energy_end','motion_shellies_energy_group_update','motion_shellies_energy_mqtt_energy','motion_shellies_energy_mqtt_power','motion_shellies_energy_power_off','motion_shellies_energy_start','motion_shellies_energy_state_changed','motion_shellies_light_counter','motion_shellies_light_end','motion_shellies_light_group_update','motion_shellies_light_mqtt_energy','motion_shellies_light_mqtt_power','motion_shellies_light_mqtt_publish_brightness','motion_shellies_light_mqtt_publish_off','motion_shellies_light_mqtt_publish_on','motion_shellies_light_mqtt_state','motion_shellies_light_mqtt_status','motion_shellies_light_power_off','motion_shellies_light_start','motion_shellies_light_state_changed','motion_shellies_moisture_counter','motion_shellies_moisture_end','motion_shellies_moisture_flood','motion_shellies_moisture_group_update','motion_shellies_moisture_start','motion_shellies_occupancy_counter','motion_shellies_occupancy_end','motion_shellies_occupancy_group_update','motion_shellies_occupancy_selected_active','motion_shellies_occupancy_selected_led','motion_shellies_occupancy_selected_location','motion_shellies_occupancy_selected_select','motion_shellies_occupancy_selected_sensitivity','motion_shellies_occupancy_selected_settings_rest','motion_shellies_occupancy_start','motion_shellies_plug_counter','motion_shellies_plug_end','motion_shellies_plug_group_update','motion_shellies_plug_mqtt_energy','motion_shellies_plug_mqtt_power','motion_shellies_plug_mqtt_publish_off','motion_shellies_plug_mqtt_publish_on','motion_shellies_plug_mqtt_state','motion_shellies_plug_mqtt_status','motion_shellies_plug_power_off','motion_shellies_plug_start','motion_shellies_plug_state_changed','motion_shellies_button_event','motion_shellies_mqtt_sensor','motion_shellies_settings_rest','motion_shellies_update_rest','motion_shellies_ota_rest','motion_shellies_mqtt_info','motion_shellies_mqtt_announce','motion_shellies_mqtt_input_event','motion_shellies_mqtt_publish_announce','motion_shellies_mqtt_publish_update','motion_shellies_offline_timeout','motion_shellies_energy_power_off','motion_shellies_light_power_off','motion_shellies_plug_power_off','motion_shellies_settings_login_failure'] %}
      {{ automations }}
  action:
    - alias: 'disable automations for shellies'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = automations[repeat.index-1]|default('') %}
              {{ s|string != '' }}
        sequence:
          - variables:
              automation: >-
                {% set s = automations[repeat.index-1] %}
                {{ 'automation.' + s|string }}
          - condition: template
            value_template: >-
              {{ states(automation)|lower == 'on' }}
          - alias: 'disable automation'
            service: automation.turn_off
            data_template:
              entity_id: >-
                {{ automation }}

- id: motion_shellies_settings_login_failure
  alias: motion_shellies_settings_login_failure
  initial_state: 'off'
  mode: single
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: sensor.motion_shellies_settings_rest
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ states('sensor.motion_shellies_settings_rest')|lower == 'false' }}
      - condition: template
        value_template: >-
          {% set s = state_attr('group.motion_shellies','sensor') %}
          {{ s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' }}
  action:
    - alias: 'condition: manage settings on?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ is_state('input_boolean.motion_shellies_manage_settings','on') }}
    - alias: 'motion_shellies_settings_login_failure: sensor.motion_shellies_settings_login'
      service: homeassistant.update_entity
      entity_id: sensor.motion_shellies_settings_login
    - alias: 'wait for login settings to update'
      wait_for_trigger:
        - platform: state
          entity_id: sensor.motion_shellies_settings_login
          to: 'True'
      continue_on_timeout: true
      timeout:
        seconds: 5
    - alias: 'motion_shellies_settings_login_failure: sensor.motion_shellies_settings_rest'
      service: homeassistant.update_entity
      entity_id: sensor.motion_shellies_settings_rest

- id: motion_shellies_mqtt_publish_announce
  alias: motion_shellies_mqtt_publish_announce
  initial_state: 'off'
  mode: single
  max_exceeded: silent
  trigger:
    - platform: time_pattern
      hours: '/1'
    - platform: event
      event_type: homeassistant_start
    - platform: state
      entity_id: input_boolean.motion_shellies_publish_announce
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('input_boolean.motion_shellies_publish_announce','on') }}
  action:
    - alias: 'motion_shellies_mqtt_publish_announce: shellies/command announce'
      service_template: mqtt.publish
      data_template:
        topic: >-
          {{- 'shellies/command' -}}
        payload_template: >-
          {{- 'announce' -}}
        qos: 2
        retain: false

- id: motion_shellies_mqtt_publish_update
  alias: motion_shellies_mqtt_publish_update
  initial_state: 'off'
  mode: single
  max_exceeded: silent
  trigger:
    - platform: time_pattern
      minutes: /45
    - platform: state
      entity_id: input_boolean.motion_shellies_publish_update
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ is_state('input_boolean.motion_shellies_publish_update','on') }}
  action:
    - alias: 'motion_shellies_mqtt_publish_update: shellies/command update'
      service_template: mqtt.publish
      data_template:
        topic: >-
          {{- 'shellies/command' -}}
        payload_template: >-
          {{- 'update' -}}
        qos: 2
        retain: false

# update shellies/+/online true/false

- id: motion_shellies_mqtt_online
  alias: motion_shellies_mqtt_online
  initial_state: !secret shelly-enable
  mode: queued
  max_exceeded: silent
  max: 100
  trigger:
    - platform: mqtt
      topic: 'shellies/+/online'
  variables:
    topic: >-
      {{ trigger.topic }}
    online: >-
      {{ 'payload_json' in trigger and trigger.payload_json|lower == 'true' }}
    id: >-
      {{ topic|replace('shellies/','')|replace('/online','') }}
    timestamp: >-
      {{ utcnow().timestamp()|int(0) }}
    mac: >-
      {% if id|lower != 'none' and id|lower != 'unavailable' and id|lower != 'unknown' and id|lower != 'none' and id|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'id') == id %}
              {% if loop.first %}{{ state_attr(i,'mac') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if sensor|lower != 'none' %}
        {% set s = states(sensor) %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s }}
        {% else %}
          {% set s = state_attr(sensor,'status') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% if 'ison' in s %}{% if s.ison|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'motion' in s %}{% if s.motion|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'flood' in s %}{% if s.flood|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'state' in s %}{% if s.state|lower == 'open' %}on{% else %}off{% endif %}
            {% else %}{{- 'none' -}}{% endif %}
          {% else %}{{- 'none' -}}{% endif %}
        {% endif %}
      {% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'motion_shellies_mqtt_online: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ sensor|lower != 'none' }}
        - condition: template
          value_template: >-
            {{ state|lower != 'none' }}
    - alias: 'motion_shellies_mqtt_online: set binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        online: >-
          {{ online }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}

# shellies/david-button/input_event/0 {"event":"L","event_cnt":66}
# shellies/david-button/input_event/0 {"event":"S","event_cnt":43}
# shellies/david-button/input_event/0 {"event":"SS","event_cnt":65}
# shellies/david-button/input_event/0 {"event":"SSS","event_cnt":69}

- id: motion_shellies_mqtt_input_event
  alias: motion_shellies_mqtt_input_event
  initial_state: 'off'
  mode: queued
  max_exceeded: warn
  max: 100
  trigger:
    - platform: mqtt
      topic: 'shellies/+/input_event/+'
  variables:
    topic: >-
      {{ trigger.topic }}
    attr: >-
      {{ topic|regex_replace('shellies/[^/]*/input_event/','') }}
    id: >-
      {{ topic|replace('shellies/','')|replace('input_event/','')|replace('/' + attr|string,'') }}
    event: >-
      {{ trigger.payload_json }}
    timestamp: >-
      {{ utcnow().timestamp()|int(0) }}
    mac: >-
      {% if id|lower != 'none' and id|lower != 'unavailable' and id|lower != 'unknown' and id|lower != 'none' and id|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'id') == id %}
              {% if loop.first %}{{ state_attr(i,'mac') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if event is iterable and 'event' in event %}
        {% if event.event|lower != 'none' %}
          {% set p = 'on' %}
        {% else %}
          {% set p = 'off' %}
        {% endif %}
      {% endif %}
      {% if p is defined %}
        {{ p }}
      {% elif sensor|lower != 'none' %}
        {{ states(sensor) }}
      {% else %}on{% endif %}
  action:
    - alias: 'choose whether to process input_event'
      choose:
        - alias: 'sensor and state good?'
          conditions:
            - condition: template
              value_template: >-
                {{ sensor|lower != 'none' }}
            - condition: template
              value_template: >-
                {{ state|lower != 'none' }}
          sequence:
            - alias: 'set_state: binary_sensor.motion_shelly_<type>_<mac>'
              service: python_script.set_state
              data_template:
                allow_create: true
                entity_id: >-
                  {{ sensor }}
                event: >-
                  {{ event }}
                updated: >-
                  {{ timestamp }}
                state: >-
                  {{ state }}
            - alias: 'set_state: binary_sensor.motion_shellies_<type>'
              service: python_script.set_state
              data_template:
                allow_create: true
                entity_id: >-
                  {{ 'binary_sensor.motion_shellies_' + type|string }}
                latitude: >-
                  {{ latitude }}
                longitude: >-
                  {{ longitude }}
                sensor: >-
                  {{ sensor }}
                updated: >-
                  {{ timestamp }}
                state: >-
                  {{ state }}
    - alias: 'choose: debug notification'
      choose:
        - alias: 'condition: debug level?'
          conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','debug') }}
          sequence:
            - alias: 'sequence: create debug notification'
              service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: input event
                notification_id: >-
                  {{ 'input_event' }}
                message: >-
                  MQTT: topic: {{ topic }}; payload: {{ trigger.payload -}}; id: {{ id -}}; sensor: {{ sensor -}}; event: {{ event -}}; state: {{ state -}}

- id: motion_shellies_button_event
  alias: motion_shellies_button_event
  initial_state: 'off'
  mode: queued
  max_exceeded: warn
  max: 10
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_shellies_button
      to: 'on'
  variables:
    sensor: >-
      {{ state_attr('binary_sensor.motion_shellies_button', 'sensor') }}
    id: >-
      {{ state_attr(sensor, 'id') }}
    updated: >-
      {{ state_attr(sensor, 'updated') }}
    event: >-
      {{ state_attr(sensor, 'event') }}
  action:
    - alias: 'choose between events: S, SS, SSS, L'
      choose:
        - alias: 'condition S?'
          conditions:
            - condition: template
              value_template: >
                {{ event.event|upper == 'S' }}
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'condition S: notify short button press'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Button press
                notification_id: >-
                  {{ sensor + '_button_press' }}
                message: >-
                  Button **{{- id -}}** short pressed; sequence: {{ event.event }}
        - alias: 'condition SS?'
          conditions:
            - condition: template
              value_template: >
                {{ event.event|upper == 'SS' }}
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'condition SS: notify doubl button press'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Double button press
                notification_id: >-
                  {{ sensor + '_button_press' }}
                message: >-
                  Button **{{- id -}}** double pressed; sequence: {{ event.event }}
        - alias: 'condition SSS?'
          conditions:
            - condition: template
              value_template: >
                {{ event.event|upper == 'SSS' }}
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'condition SSS: notify double button press'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Triple button press
                notification_id: >-
                  {{ sensor + '_button_press' }}
                message: >-
                  Button **{{- id -}}** triple pressed; sequence: {{ event.event }}
        - alias: 'condition L?'
          conditions:
            - condition: template
              value_template: >
                {{ event.event|upper == 'L' }}
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'condition L: notify long button press'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Button press
                notification_id: >-
                  {{ sensor + '_button_press' }}
                message: >-
                  Button **{{- id -}}** long pressed; sequence: {{ event.event }}
        - alias: 'no press'
          conditions:
            - condition: template
              value_template: >
                {{ event.event|length == 0 }}
          sequence:
            - alias: 'notify NO button press'
              service: persistent_notification.create
              data_template:
                title: >-
                  WARN: No button press
                notification_id: >-
                  {{ sensor + '_button_press' }}
                message: >-
                  Button **{{- id -}}** NOT pressed

# flood
# shellies/bathroom-flood/sensor/temperature 73.85
# shellies/bathroom-flood/sensor/flood false
# shellies/bathroom-flood/sensor/battery 82
# shellies/bathroom-flood/sensor/error 0
# shellies/bathroom-flood/sensor/act_reasons ["button"]

# humdity/temperature
# shellies/sheshed-temperature/sensor/temperature 91.40
# shellies/sheshed-temperature/sensor/humidity 35.5
# shellies/sheshed-temperature/sensor/battery 66
# shellies/sheshed-temperature/sensor/error 0
# shellies/sheshed-temperature/sensor/act_reasons ["button"]

# door-window
# shellies/door-window-2/sensor/act_reasons ["sensor","temperature"]

# gas
# shellies/kitchen-gas/sensor/gas test
# shellies/kitchen-gas/sensor/self_test completed

# shellies/kitchen-gas/valve/0/state not_connected

# button
# shellies/david-button/sensor/battery 89
# shellies/david-button/sensor/charger false
# shellies/david-button/sensor/error 0
# shellies/david-button/sensor/act_reasons ["button"]

- id: motion_shellies_mqtt_sensor
  alias: motion_shellies_mqtt_sensor
  initial_state: 'off'
  mode: queued
  max_exceeded: warn
  max: 100
  trigger:
    - platform: mqtt
      topic: 'shellies/+/sensor/+'
  variables:
    topic: >-
      {{ trigger.topic }}
    kind: >-
      {{ topic|regex_replace('shellies/[^/]*/','')|regex_replace('[0-9/]*/[^/]*','') }}
    attr: >-
      {{ topic|regex_replace('shellies/[^/]*/' + kind|string + '/','') }}
    id: >-
      {{ topic|replace('shellies/','')|replace(kind + '/','')|replace('/' + attr|string,'') }}
    timestamp: >-
      {{ utcnow().timestamp()|int(0) }}
    mac: >-
      {% if id|lower != 'none' and id|lower != 'unavailable' and id|lower != 'unknown' and id|lower != 'none' and id|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'id') == id %}
              {% if loop.first %}{{ state_attr(i,'mac') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    model: >-
      {% if sensor|lower != 'none' %}
        {{ state_attr(sensor,'model') }}
      {% else %}{{- 'none' -}}{% endif %}
    latitude: >-
      {% if sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'settings') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s.lat }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    longitude: >-
      {% if sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'settings') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s.lng }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    status: >-
      {% set v = trigger.payload_json|default(trigger.payload|string|to_json) %}
      {% if sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'status') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|length > 0 %}
          {% if s is string %}{% set s = s|replace('\'','"')|from_json %}{% endif %}
          {% if attr in s %}
            {% set s = s|to_json %}
            {% set old = '"' + attr|string + '":[ ]*[^}^,]*' %}
            {% set new = '"' + attr|string + '": ' + v|string %}
            {% set s = s|regex_replace(old,new) %}
          {% else %}
            {% set s = s|to_json %}
            {% set old = '}' %}
            {% set new = ',"' + attr|string + '": ' + v|string + '}' %}
            {% set s = s|regex_replace(old,new) %}
          {% endif %}
          {% set old = '"timestamp":[ ]*[^}^,]*' %}
          {% set new = '"timestamp": ' + timestamp|int|string %}
          {% set p = s|regex_replace(old,new) %}
        {% endif %}
      {% endif %}
      {% if p is defined %}
        {{ p }}
      {% else %}
        {% set s = '{"' + attr|string + '":' + v|to_json|string + ',"timestamp":' + timestamp|int|string + '}' %}
        {{ s|from_json }}
      {% endif %}
    state: >-
      {% if 'ison' in status %}
        {% if status.ison|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'motion' in status %}
        {% if status.motion|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'flood' in status %}
        {% if status.flood|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'state' in status %}
        {% if status.state|lower == 'open' %}on{% else %}off{% endif %}
      {% elif sensor|lower != 'none' %}
        {{ states(sensor) }}
      {% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'set state'
      choose:
        - alias: 'sensor and state good?'
          conditions:
            - condition: template
              value_template: >-
                {{ sensor|lower != 'none' }}
            - condition: template
              value_template: >-
                {{ state|lower != 'none' }}
          sequence:
            - alias: 'set_state: binary_sensor.motion_shelly_<type>_<mac>'
              service: python_script.set_state
              data_template:
                allow_create: true
                entity_id: >-
                  {{ sensor }}
                status: >-
                  {{ status }}
                updated: >-
                  {{ timestamp }}
                state: >-
                  {{ state }}
            - alias: 'set_state: binary_sensor.motion_shellies_<type>'
              service: python_script.set_state
              data_template:
                allow_create: true
                entity_id: >-
                  {{ 'binary_sensor.motion_shellies_' + type|string }}
                latitude: >-
                  {{ latitude }}
                longitude: >-
                  {{ longitude }}
                sensor: >-
                  {{ sensor }}
                updated: >-
                  {{ timestamp }}
                state: >-
                  {{ state }}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - service: persistent_notification.create
              data_template:
                title: >-
                  DEBUG: Shelly sensor MQTT
                notification_id: >-
                  {{ 'shelly-sensor-mqtt-update' }}
                message: >-
                  Sensor: {{ sensor -}}; state: {{ state -}}; ID: {{ id -}}; MAC: {{ mac -}}; topic: {{ topic -}}; kind: {{ kind -}}; model: {{ model -}}; type: {{ type }}
                  Status: {{ status }}

# motion and lightbulbs

- id: motion_shellies_mqtt_status
  alias: motion_shellies_mqtt_status
  initial_state: !secret shelly-enable
  mode: queued
  max_exceeded: silent
  max: 100
  trigger:
    - platform: mqtt
      topic: 'shellies/+/status'
  variables:
    topic: >-
      {{ trigger.topic }}
    status: >-
      {{ trigger.payload_json }}
    id: >-
      {{ topic|replace('shellies/','')|replace('/status','') }}
    active: >-
      {% if 'active' in status %}
        {{ status.active|lower == 'true' }}
      {% else %}true{% endif %}
    lux: >-
      {% if 'lux' in status %}
        {{ status.lux }}
      {% else %}{{- 'none' -}}{% endif %}
    bat: >-
      {% if 'bat' in status %}
        {{ status.bat}}
      {% else %}{{- 'none' -}}{% endif %}
    timestamp: >-
      {% if 'timestamp' in status %}
        {% set s = status.timestamp %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|int(0) > 0 %}
          {{ s }}
        {% else %}
          {{ utcnow().timestamp()|int(0) }}
        {% endif %}
      {% else %}
        {{ utcnow().timestamp()|int(0) }}
      {% endif %}
    mac: >-
      {% if id|lower != 'none' and id|lower != 'unavailable' and id|lower != 'unknown' and id|lower != 'none' and id|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'id') == id %}
              {% if loop.first %}{{ state_attr(i,'mac') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none'
        and type|lower != 'none' and type|lower != 'unavailable' and type|lower != 'unknown' and type|lower != 'none' %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    model: >-
      {% if sensor|lower != 'none' and sensor|lower != 'unavailable' and sensor|lower != 'unknown' and sensor|lower != 'none' %}
        {{ state_attr(sensor,'model') }}
      {% else %}{{- 'none' -}}{% endif %}
    ip: >-
      {% set s = state_attr(sensor,'ip') %}
      {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {{ s }}
      {% else %}{{- 'none' -}}{% endif %}
    latitude: >-
      {% if sensor|lower != 'none' and sensor|lower != 'unavailable' and sensor|lower != 'unknown' and sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'settings') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s.lat }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    longitude: >-
      {% if sensor|lower != 'none' and sensor|lower != 'unavailable' and sensor|lower != 'unknown' and sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'settings') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s.lng }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    distance: >-
      {% set s = states('zone.home') %}
      {% if latitude|lower != 'none' and longitude|lower != 'none' and s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {% set s = distance('zone.home',latitude,longitude) %}
        {% if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|int(0) is number and s|int(0) < 40075 %}
          {{ '%0.2f'|format(s|float(0.0) * 1000) }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    gps: >-
      {% set s = states('zone.home') %}
      {% if latitude|lower != 'none' and longitude|lower != 'none' and s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {% set s = state_attr('zone.home','radius') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|int(0) > 0 %}
          {{ latitude|lower != 'none' and longitude|lower != 'none' and distance|int(0) < s|int(0) }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if 'motion' in status %}
        {% if trigger.payload_json.motion|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'flood' in trigger.payload_json %}
        {% if trigger.payload_json.flood|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'ison' in trigger.payload_json %}
        {% if trigger.payload_json.ison|lower == 'true' %}on{% else %}off{% endif %}
      {% elif sensor|lower != 'none' %}
        {% set s = state_attr(sensor,'status') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% if 'motion' in s %}{% if s.motion|lower == 'true' %}on{% else %}off{% endif %}
          {% elif 'flood' in s %}{% if s.flood|lower == 'true' %}on{% else %}off{% endif %}
          {% elif 'ison' in s %}{% if s.ison|lower == 'true' %}on{% else %}off{% endif %}
          {% elif 'state' in s %}{% if s.state|lower == 'open' %}on{% else %}off{% endif %}
          {% else %}unknown{% endif %}
        {% else %}unknown{% endif %}
      {% else %}unknown{% endif %}
  action:
    - alias: 'choose: announce'
      choose:
        - alias: 'condition: mac is undefined?'
          conditions:
            - condition: template
              value_template: >
                {{ mac|lower == 'none' or mac|length == 0 }}
            - condition: template
              value_template: >-
                {{ is_state('input_boolean.motion_shellies_publish_announce','on') }}
          sequence:
            - alias: 'mac undefined: publish: shellies/<id>/command announce'
              service: mqtt.publish
              data_template:
                topic: >-
                  {{ 'shellies/' + id|string + '/command' }}
                payload_template: >-
                  {{- 'announce' -}}
    - alias: 'condition: mac good?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|lower != 'none' and mac|length > 0 }}
    - alias: 'condition: type good?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ type|lower != 'unavailable' and type|lower != 'unknown' and type|lower != 'none' and type|lower != 'none' and type|length > 0 }}
    - alias: 'condition: state good?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ state|lower != 'unavailable' and state|lower != 'unknown' and state|lower != 'none' and state|lower != 'none' }}
    - alias: 'set_state: binary_sensor.motion_shellies_<type>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ 'binary_sensor.motion_shellies_' + type|string }}
        sensor: >-
          {{ sensor }}
        id: >-
          {{ id }}
        ip: >-
          {{ ip }}
        model: >-
          {{ model }}
        type: >-
          {{ type }}
        mac: >-
          {{ mac }}
        timestamp: >-
          {{ timestamp }}
        latitude: >-
          {{ latitude }}
        longitude: >-
          {{ longitude }}
        home: >-
          {{ gps|lower == 'true' }}
        state: >-
          {{ state }}
    - alias: 'set_state: binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        active: >-
          {{ active }}
        bat: >-
          {{ bat }}
        lux: >-
          {{ lux }}
        status: >-
          {{ status }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        timestamp: >-
          {{ timestamp }}
        state: >-
          {{ state }}
    - alias: 'condition: state is on'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ state == 'on' }}
    - alias: 'choose: gps good? state on?'
      choose:
        - alias: 'choose: condition: notify if gps bad'
          conditions:
            - condition: template
              value_template: >
                {{ gps|lower != 'true' }}
          sequence:
            - alias: 'sequence: notify invalid GPS'
              service: persistent_notification.create
              data_template:
                title: >-
                  WARN: Sensor location
                notification_id: >-
                  {{ sensor + '_gps_invalid' }}
                message: >-
                  Sensor **{{- id -}}** located outside of home; model: {{ model -}}; distance: {{ distance|int(0) -}}m; GPS: {{ latitude,longitude }}
                  {{- '<br>' -}}
                  {%- if ip|lower != 'none' and ip|lower != 'none' -%}
                    {{- '[![](https://img.shields.io/badge/location-reset-green.svg)]('
                    + 'http://' + states('input_text.motion_shellies_username')
                    + ':'
                    + states('input_text.motion_shellies_password')
                    + '@'
                    + ip|string + '/settings?timezone=utc&lat=' + state_attr('zone.home','latitude')|string + '&lng=' + state_attr('zone.home','longitude')|string + ')' -}}
                  {%- endif -%}
                  {%- if latitude|lower != 'none' and longitude|lower != 'none' -%}
                    {{- '[![](https://img.shields.io/badge/device-map-blue.svg)]('
                      + 'https://www.google.com/maps/@'
                      + latitude|string + ',' + longitude|string + ',15z'
                      + ')' -}}
                  {%- endif -%}
                  {{-  '[![](https://img.shields.io/badge/home-map-blue.svg)]('
                    + 'https://www.google.com/maps/@'
                    + state_attr('zone.home','latitude')|string + ',' + state_attr('zone.home','longitude')|string + ',22z'
                    + ')' -}}
        - alias: 'choose: condition: state on?'
          conditions:
            - condition: template
              value_template: >-
                {{ state|lower == 'on' }}
          sequence:
            - alias: 'sequence: set_state: sensor.motion_shellies_<type>'
              service: python_script.set_state
              data_template:
                allow_create: true
                entity_id: >-
                  {{ 'sensor.motion_shellies_' + type|string }}
                timestamp: >-
                  {{ timestamp }}
                latitude: >-
                  {% if gps|lower == 'true' %}{{ latitude }}{% else %}{{ state_attr('zone.home','latitude') }}{% endif %}
                longitude: >-
                  {% if gps|lower == 'true' %}{{ longitude }}{% else %}{{ state_attr('zone.home','longitude') }}{% endif %}
                distance: >-
                  {{ distance }}
                active: >-
                  {{ active }}
                bat: >-
                  {{ bat }}
                lux: >-
                  {{ lux }}
                state: >-
                  {{ id }}

# handle updates from REST API call to get settings from IP

- id: motion_shellies_settings_rest
  alias: motion_shellies_settings_rest
  initial_state: 'off'
  mode: queued
  max_exceeded: warn
  max: 10
  trigger:
    - platform: state
      entity_id: sensor.motion_shellies_settings_rest
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ states('sensor.motion_shellies_settings_rest')|lower == 'true' }}
  variables:
    settings: >-
      {% set s = states(trigger.entity_id) %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {{ states.sensor.motion_shellies_settings_rest.attributes }}
      {% else %}{{- 'none' -}}{% endif %}
    latitude: >-
      {% set s = states(trigger.entity_id) %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {{ state_attr('sensor.motion_shellies_settings_rest','lat')|float(0.0) }}
      {% else %}{{- 'none' -}}{% endif %}
    longitude: >-
      {% set s = states(trigger.entity_id) %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {{ state_attr('sensor.motion_shellies_settings_rest','lng')|float(0.0) }}
      {% else %}{{- 'none' -}}{% endif %}
    distance: >-
      {% set s = states('zone.home') %}
      {% if latitude|lower != 'none' and longitude|lower != 'none' and s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {% set s = distance('zone.home',latitude,longitude) %}
        {% if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|int(0) is number and s|int(0) < 40075 %}
          {{ '%0.2f'|format(s|float(0.0) * 1000) }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    gps: >-
      {% set s = states('zone.home') %}
      {% if latitude|lower != 'none' and longitude|lower != 'none' and s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {% set s = state_attr('zone.home','radius') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|int(0) > 0 %}
          {{ latitude|lower != 'none' and longitude|lower != 'none' and distance|int(0) < s|int(0) }}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    mac: >-
      {% set s = states(trigger.entity_id) %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {% set s = state_attr('sensor.motion_shellies_settings_rest','device') %}
        {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
          {{ s.mac|lower }}
        {% else %}{{- 'unknown' -}}{% endif %}
      {% else %}{{- 'unknown' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none'
        and type|lower != 'none' and type|lower != 'unavailable' and type|lower != 'unknown' and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    ip: >-
      {% set s = states(trigger.entity_id) %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {% set s = state_attr('sensor.motion_shellies_settings_rest','wifi_sta') %}
        {%- if s|lower != 'none' and s is iterable and 'ip' in s and s.ip|lower != 'none' and s.ip|lower != 'none' and s.ip|length > 0 %}
          {% set p = s.ip %}
        {% endif %}
      {% endif %}
      {% if p is defined %}
        {{ p }}
      {% elif sensor|lower != 'none' %}
        {{ state_attr(sensor,'ip') }}
      {% else %}{{- 'none' -}}{% endif %}
    model: >-
      {% if sensor|lower != 'none' %}
        {{ state_attr(sensor,'model') }}
      {% else %}{{- 'none' -}}{% endif %}
    id: >-
      {% if sensor|lower != 'none' %}
        {{ state_attr(sensor,'id') }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if sensor|lower != 'none' %}
        {% if is_state(sensor,'on') -%}on{% else %}off{% endif %}
      {% else %}unknown{% endif %}
  action:
    - alias: 'motion_shellies_settings_rest: condition: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'motion_shellies_settings_rest: update binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        friendly_name: >-
          {{ type|capitalize + ' in ' + id }}
        ip: >-
          {{ ip }}
        latitude: >-
          {{ latitude }}
        longitude: >-
          {{ longitude }}
        settings: >-
          {{ settings }}
        home: >-
          {{ gps|lower == 'true' }}
        distance: >-
          {{ distance }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}
    - alias: 'motion_shellies_settings_rest: condition: gps not good?'
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {{ gps|lower != 'true' }}
    - alias: 'motion_shellies_settings_rest: notify GPS invalid'
      service: persistent_notification.create
      data_template:
        title: >-
          INVALID: {{ id -}}
        notification_id: >-
          {{ sensor + '_gps_invalid' }}
        message: >-
          Sensor **{{- id -}}** location outside of home; model: {{ model -}}; distance: {{ distance|int(0) -}}m; GPS: {{ latitude,longitude }}
          {{- '<br>' -}}
          {%- if ip|lower != 'none' and ip|lower != 'none' -%}
            {{- '[![](https://img.shields.io/badge/location-reset-green.svg)]('
            + 'http://' + states('input_text.motion_shellies_username')
            + ':'
            + states('input_text.motion_shellies_password')
            + '@'
            + ip|string + '/settings?timezone=utc&lat=' + state_attr('zone.home','latitude')|string + '&lng=' + state_attr('zone.home','longitude')|string + ')' -}}
          {%- endif -%}
          {%- if latitude|lower != 'none' and longitude|lower != 'none' -%}
            {{- '[![](https://img.shields.io/badge/device-map-blue.svg)]('
              + 'https://www.google.com/maps/@'
              + latitude|string + ',' + longitude|string + ',15z'
              + ')' -}}
          {%- endif -%}
          {{-  '[![](https://img.shields.io/badge/home-map-blue.svg)]('
            + 'https://www.google.com/maps/@'
            + state_attr('zone.home','latitude')|string + ',' + state_attr('zone.home','longitude')|string + ',22z'
            + ')' -}}

## update on REST sensor '<username>:<password>@<ip>/status'

- id: motion_shellies_update_rest
  alias: motion_shellies_update_rest
  initial_state: 'off'
  mode: queued
  max_exceeded: silent
  max: 100
  trigger:
    - platform: state
      entity_id: sensor.motion_shellies_update
      to: 'True'
  variables:
    info: >-
      {% set s = states('sensor.motion_shellies_update') %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {{ states.sensor.motion_shellies_update.attributes }}
      {% else %}{{- 'none' -}}{% endif %}
    mac: >-
      {% set s = states('sensor.motion_shellies_update') %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {% set s = state_attr('sensor.motion_shellies_update','mac') %}
        {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
          {{ s|lower }}
        {% else %}{{- 'unknown' -}}{% endif %}
      {% else %}{{- 'unknown' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    id: >-
      {% if sensor|lower != 'none' and sensor|lower != 'unavailable' and sensor|lower != 'unknown' and sensor|lower != 'none' %}
        {{ state_attr(sensor,'id') }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if sensor|lower != 'none' %}
        {% if is_state(sensor,'on') -%}on{% else %}off{% endif %}
      {% else %}unknown{% endif %}
  action:
    - alias: 'condition: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'update binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        info: >-
          {{ info }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}

- id: motion_shellies_ota_rest
  alias: motion_shellies_ota_rest
  initial_state: 'off'
  mode: queued
  max_exceeded: silent
  max: 100
  trigger:
    - platform: state
      entity_id: sensor.motion_shellies_ota
      to: 'True'
  variables:
    ota: >-
      {% set s = states('sensor.motion_shellies_ota') %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {{ states.sensor.motion_shellies_ota.attributes }}
      {% else %}{{- 'none' -}}{% endif %}
    ip: >-
      {% set s = states('group.motion_shellies') %}
      {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {% set s = state_attr('group.motion_shellies','ip') %}
        {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
          {{ s|lower }}
        {% else %}{{- 'unknown' -}}{% endif %}
      {% else %}{{- 'unknown' -}}{% endif %}
    mac: >-
      {% if ip|lower != 'none' and ip|lower != 'unavailable' and ip|lower != 'unknown' and ip|lower != 'none' and ip|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'ip') == ip %}
              {% if loop.first %}{{ state_attr(i,'mac') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if sensor|lower != 'none' %}
        {% if is_state(sensor,'on') -%}on{% else %}off{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'condition: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'update binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        ota: >-
          {{ info }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}

##
## update on MQTT payload 'shellies/+/info'
##

# motion

# {
#   "bat": {
#     "value": 100,
#     "voltage": 4.171
#   },
#   "cfg_changed_cnt": 0,
#   "charger": true,
#   "cloud": {
#     "connected": false,
#     "enabled": false
#   },
#   "has_update": false,
#   "lux": {
#     "illumination": "bright",
#     "is_valid": true,
#     "value": 1027
#   },
#   "mac": "60A423D3F280",
#   "mqtt": {
#     "connected": true,
#     "enabled": true
#   },
#   "sensor": {
#     "active": true,
#     "is_valid": true,
#     "motion": false,
#     "timestamp": 1622451089,
#     "vibration": false
#   },
#   "serial": 212,
#   "time": "09:09",
#   "timestamp": -1815024272,
#   "unixtime": 1622452158,
#   "update": {
#     "beta_version": "",
#     "has_update": false,
#     "new_version": "20210226-072307/v1.1.0@f31e1d2b",
#     "old_version": "20210226-072307/v1.1.0@f31e1d2b",
#     "status": "idle"
#   },
#   "uptime": 75681,
#   "wifi_sta": {
#     "connected": true,
#     "ip": "192.168.1.210",
#     "rssi": -48,
#     "ssid": "CABIN"
#   }
# }

# bulb

# {
#   "actions_stats": {
#     "skipped": 0
#   },
#   "cfg_changed_cnt": 0,
#   "cloud": {
#     "connected": false,
#     "enabled": false
#   },
#   "fs_free": 163903,
#   "fs_size": 233681,
#   "has_update": false,
#   "lights": [
#     {
#       "brightness": 50,
#       "has_timer": false,
#       "ison": true,
#       "source": "http",
#       "timer_duration": 0,
#       "timer_remaining": 0,
#       "timer_started": 0
#     }
#   ],
#   "mac": "ECFABC6F7138",
#   "meters": [
#     {
#       "counters": [
#         1.5,
#         1.5,
#         1.5
#       ],
#       "is_valid": true,
#       "power": 1.5,
#       "timestamp": 1623443734,
#       "total": 199
#     }
#   ],
#   "mqtt": {
#     "connected": true
#   },
#   "ping_check": true,
#   "ram_free": 39576,
#   "ram_total": 50880,
#   "serial": 1,
#   "time": "20:35",
#   "unixtime": 1623443734,
#   "update": {
#     "has_update": false,
#     "new_version": "20210429-100039/v1.10.4-g3f94cd7",
#     "old_version": "20210429-100039/v1.10.4-g3f94cd7",
#     "status": "idle"
#   },
#   "uptime": 8538,
#   "wifi_sta": {
#     "connected": true,
#     "ip": "192.168.1.217",
#     "rssi": -52,
#     "ssid": "CABIN"
#   }
# }

# flood

# {
#   "act_reasons": [
#     "button"
#   ],
#   "actions_stats": {
#     "skipped": 0
#   },
#   "bat": {
#     "value": 91,
#     "voltage": 2.88
#   },
#   "cfg_changed_cnt": 0,
#   "cloud": {
#     "connected": false,
#     "enabled": false
#   },
#   "flood": false,
#   "fs_free": 148090,
#   "fs_size": 233681,
#   "has_update": false,
#   "is_valid": true,
#   "mac": "84CCA8B0AC23",
#   "mqtt": {
#     "connected": true
#   },
#   "rain_sensor": false,
#   "ram_free": 34072,
#   "ram_total": 51024,
#   "serial": 1,
#   "time": "16:10",
#   "tmp": {
#     "is_valid": true,
#     "tC": 20.38,
#     "tF": 68.68,
#     "units": "F",
#     "value": 68.68
#   },
#   "unixtime": 1624551016,
#   "update": {
#     "has_update": false,
#     "new_version": "20210413-155706/v1.10.2-gb89901a",
#     "old_version": "20210413-155706/v1.10.2-gb89901a",
#     "status": "idle"
#   },
#   "uptime": 135,
#   "wifi_sta": {
#     "connected": true,
#     "ip": "192.168.1.219",
#     "rssi": -42,
#     "ssid": "CABIN"
#   }
# }

# door/window-2

# {
#   "accel": {
#     "tilt": -1,
#     "vibration": -1
#   },
#   "act_reasons": [
#     "sensor"
#   ],
#   "actions_stats": {
#     "skipped": 0
#   },
#   "bat": {
#     "value": 96,
#     "voltage": 5.83
#   },
#   "cfg_changed_cnt": 0,
#   "cloud": {
#     "connected": true,
#     "enabled": true
#   },
#   "fs_free": 153612,
#   "fs_size": 233681,
#   "has_update": false,
#   "is_valid": true,
#   "lux": {
#     "illumination": "bright",
#     "is_valid": true,
#     "value": 526
#   },
#   "mac": "E8DB84D32228",
#   "mqtt": {
#     "connected": true
#   },
#   "ram_free": 21784,
#   "ram_total": 50864,
#   "sensor": {
#     "is_valid": true,
#     "state": "close"
#   },
#   "serial": 25,
#   "time": "",
#   "tmp": {
#     "is_valid": true,
#     "tC": 33.6,
#     "tF": 92.48,
#     "units": "F",
#     "value": 92.48
#   },
#   "unixtime": 0,
#   "update": {
#     "has_update": false,
#     "new_version": "",
#     "old_version": "20210413-154114/v1.10.2-gb89901a",
#     "status": "unknown"
#   },
#   "uptime": 59,
#   "wifi_sta": {
#     "connected": true,
#     "ip": "192.168.1.174",
#     "rssi": -34,
#     "ssid": "CABIN"
#   }
# }

# shellies_info

- id: motion_shellies_mqtt_info
  alias: motion_shellies_mqtt_info
  initial_state: 'off'
  mode: queued
  max_exceeded: silent
  max: 100
  trigger:
    - platform: mqtt
      topic: 'shellies/+/info'
  variables:
    topic: >-
      {{ trigger.topic }}
    id: >-
      {{ topic|replace('shellies/','')|replace('/info','') }}
    ip: >-
      {{ trigger.payload_json.wifi_sta.ip }}
    mac: >-
      {{ trigger.payload_json.mac|lower }}
    info: >-
      {{ trigger.payload_json }}
    type: >-
      {% if mac|lower != 'none' and mac|lower != 'unavailable' and mac|lower != 'unknown' and mac|lower != 'none' and mac|length > 0 %}
        {% set s = states('group.motion_shellies') %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {% set s = state_attr('group.motion_shellies','entity_id') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% for i in s if state_attr(i,'mac') == mac %}
              {% if loop.first %}{{ state_attr(i,'type') }}{% endif %}
            {% endfor %}
          {% else %}{{- 'none' -}}{% endif %}
        {% else %}{{- 'none' -}}{% endif %}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
    state: >-
      {% if 'sensor' in info and 'motion' in info.sensor %}
        {% if info.sensor.motion|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'lights' in info and 'ison' in info.lights %}
        {% if info.lights.ison|lower == 'true' %}on{% else %}off{% endif %}
      {% elif 'flood' in info %}
        {% if info.flood|lower == 'true' %}on{% else %}off{% endif %}
      {% elif sensor|lower != 'none' %}{{ states(sensor) }}{% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'condition: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'condition: state good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ state|lower != 'none' }}
    - alias: 'set_state: binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        info: >-
          {{ info }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}

##
## update on MQTT payload 'shellies/+/announce'
##

# motion

# {
#   "fw_ver": "20210226-072307/v1.1.0@f31e1d2b",
#   "id": "shellymotionsensor-60A423D3F280",
#   "ip": "192.168.1.210",
#   "mac": "60A423D3F280",
#   "model": "SHMOS-01",
#   "new_fw": false
# }

# lightbulb

# {
#   "fw_ver": "20210429-100039/v1.10.4-g3f94cd7",
#   "id": "bulb-sconce-left",
#   "ip": "192.168.1.217",
#   "mac": "ECFABC6F7138",
#   "model": "SHVIN-1",
#   "new_fw": false
# }
#
# {
#   "fw_ver": "20210429-100125/v1.10.4-g3f94cd7",
#   "id": "light-nightstand-david",
#   "ip": "192.168.1.215",
#   "mac": "BCDDC26641D3",
#   "model": "SHBDUO-1",
#   "new_fw": false
# }

# flood

# {
#   "fw_ver": "20210413-155706/v1.10.2-gb89901a",
#   "id": "bathroom-flood",
#   "ip": "192.168.1.219",
#   "mac": "84CCA8B0AC23",
#   "model": "SHWT-1",
#   "new_fw": false
# }

# door/window-2

# {
#   "fw_ver": "20210413-154114/v1.10.2-gb89901a",
#   "id": "door-window-2",
#   "ip": "192.168.1.174",
#   "mac": "E8DB84D32228",
#   "model": "SHDW-2",
#   "new_fw": false
# }

# humidty/temperature

# {
#   "fw_ver": "20210413-154417/v1.10.2-gb89901a",
#   "id": "sheshed-temperature",
#   "ip": "192.168.1.171",
#   "mac": "98CDAC1E5512",
#   "model": "SHHT-1",
#   "new_fw": false
# }

# button

# {
#   "fw_ver": "20210415-130749/v1.10.3-g23074d0",
#   "id": "david-button",
#   "ip": "192.168.1.178",
#   "mac": "E8DB84AA2408",
#   "model": "SHBTN-2",
#   "new_fw": false
# }

# gas

# {
#   "fw_ver": "20210720-190855/v1.11.0-g6abd92e",
#   "id": "kitchen-gas",
#   "ip": "192.168.1.181",
#   "mac": "10521C47BE46",
#   "model": "SHGS-1",
#   "new_fw": false
# }

# plug

# {
#   "fw_ver": "20210720-185808/v1.11.0-g6abd92e",
#   "id": "masterbedroom-tv",
#   "ip": "192.168.1.191",
#   "mac": "E868E7F15AC7",
#   "model": "SHPLG-U1",
#   "new_fw": false
# }

# energy

# {
#   "fw_ver": "20211109-131251/v1.11.7-g682a0db",
#   "id": "equipmentpad-pumps",
#   "ip": "192.168.1.86",
#   "mac": "8CAAB5619544",
#   "model": "SHEM-3",
#   "new_fw": false
# }

- id: motion_shellies_mqtt_announce
  alias: motion_shellies_mqtt_announce
  initial_state: 'off'
  mode: queued
  max_exceeded: warn
  max: 20
  trigger:
    - platform: mqtt
      topic: 'shellies/+/announce'
  variables:
    topic: >-
      {{ trigger.topic }}
    id: >-
      {{ topic|replace('shellies/','')|replace('/announce','') }}
    ip: >-
      {{ trigger.payload_json.ip }}
    mac: >-
      {{ trigger.payload_json.mac|lower }}
    announce: >-
      {{ trigger.payload_json }}
    model: >-
      {{ trigger.payload_json.model|upper }}
    type: >-
      {% if model == 'SHMOS-01' %}
        {{ 'occupancy' }}
      {% elif model == 'SHBDUO-1' or model == 'SHVIN-1' %}
        {{ 'light' }}
      {% elif model == 'SHWT-1' %}
        {{ 'moisture' }}
      {% elif model == 'SHDW-2' %}
        {{ 'door' }}
      {% elif model == 'SHHT-1' %}
        {{ 'thermometer' }}
      {% elif model == 'SHBTN-2' %}
        {{ 'button' }}
      {% elif model == 'SHGS-1' %}
        {{ 'gas' }}
      {% elif model == 'SHPLG-U1' %}
        {{ 'plug' }}
      {% elif model == 'SHEM-3' %}
        {{ 'energy' }}
      {% else %}{{- 'none' -}}{% endif %}
    picture: >-
      {{ '/local/images/shelly/' + model|string + '.png' }}
    ids: >-
      {% set s = states('group.motion_shellies') %}
      [{%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {%- set prior = state_attr('group.motion_shellies','ids') -%}
        {%- if prior|lower != 'none' and prior|lower != 'unknown' and prior|lower != 'unavailable' and prior|lower != 'none' %}
          {% set prior = prior|string|from_json %}
          {%- if prior|lower != 'none' and prior|lower != 'unknown' and prior|lower != 'unavailable' and prior|lower != 'none' %}
            {% if prior is iterable %}
              {% if prior|length > 0 -%}
                {%- for p in prior if p|length > 0 and not id in prior -%}
                  {%- if loop.first -%}{%- else -%},{% endif -%}
                  "{{- p -}}"
                {%- endfor -%}
              {%- else -%}{%- set prior = none -%}{%- endif -%}
            {%- else -%}{%- set prior = none -%}{%- endif -%}
          {%- else -%}{%- set prior = none -%}{%- endif -%}
        {%- else -%}{%- set prior = none -%}{%- endif -%}
      {%- else -%}{%- set prior = none -%}{%- endif -%}
      {%- if prior|lower != 'none' -%},{%- endif -%}
      "{{- id -}}"]
    types: >-
      [{% for eid in states.binary_sensor|map(attribute='entity_id')|list if 'motion_shelly_' in eid  -%}
      {%- if not loop.first -%},{%- endif -%}
      "{{- state_attr(eid,'type') -}}"
      {%- endfor %}]
    models: >-
      [{% for eid in states.binary_sensor|map(attribute='entity_id')|list if 'motion_shelly_' in eid  -%}
      {%- if not loop.first -%},{%- endif -%}
      "{{- state_attr(eid,'model') -}}"
      {%- endfor %}]
    macs: >-
      {% set s = states('group.motion_shellies') %}
      [{%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' -%}
        {%- set prior = state_attr('group.motion_shellies','macs') -%}
        {%- if prior|lower != 'none' and prior|lower != 'unknown' and prior|lower != 'unavailable' and prior|lower != 'none' %}
          {% set prior = prior|string|from_json %}
          {%- if prior|lower != 'none' and prior|lower != 'unknown' and prior|lower != 'unavailable' and prior|lower != 'none' %}
            {% if prior is iterable %}
              {% if prior|length > 0 -%}
                {%- for p in prior if p|length > 0 -%}
                  {%- if loop.first -%}{%- else -%},{% endif -%}
                  "{{- p -}}"
                {%- endfor -%}
              {%- else -%}{%- set prior = none -%}{%- endif -%}
            {%- else -%}{%- set prior = none -%}{%- endif -%}
          {%- else -%}{%- set prior = none -%}{%- endif -%}
        {%- else -%}{%- set prior = none -%}{%- endif -%}
      {%- else -%}{%- set prior = none -%}{%- endif -%}
      {%- if prior|lower != 'none' -%},{%- endif -%}
      "{{- mac -}}"]
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{- 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string -}}
      {% else %}{{- 'none' -}}{% endif %}
    actuator: >-
      {% for j in states.light|list + states.switch|list if j.attributes.friendly_name|string == id %}
        {% if loop.first %}{{ j.entity_id }}{% endif %}
      {% endfor %}
    state: >-
      {% if sensor|lower != 'none' %}
        {% set s = states(sensor) %}
        {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
          {{ s }}
        {% else %}
          {% set s = state_attr(sensor,'status') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
            {% if 'ison' in s %}{% if s.ison|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'motion' in s %}{% if s.motion|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'flood' in s %}{% if s.flood|lower == 'true' %}on{% else %}off{% endif %}
            {% elif 'state' in s %}{% if s.state|lower == 'open' %}on{% else %}off{% endif %}
            {% else %}{{- 'none' -}}{% endif %}
          {% else %}unknown{% endif %}
        {% endif %}
      {% else %}unavailable{% endif %}
  action:
    - alias: 'sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'update binary_sensor.motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        actuator: >-
          {{ actuator }}
        entity_picture: >-
          {{ picture }}
        device_class: >-
          {{ type }}
        friendly_name: >-
          {{- type|capitalize + ' in ' + id|string -}}
        ip: >-
          {{ ip }}
        id: >-
          {{ id }}
        model: >-
          {{ model }}
        mac: >-
          {{ mac }}
        announce: >-
          {{ announce }}
        type: >-
          {{ type }}
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        state: >-
          {{ state }}
    - alias: 'update group.motion_shellies_<type>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{- 'group.motion_shellies_' + type|string -}}
        friendly_name: >-
          {{ type|capitalize + '(s)' }}
        entity_ids: >-
          [{% for eid in states.binary_sensor|map(attribute='entity_id')|list if ('motion_shelly_' + type|string) in eid  -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- eid -}}"
          {%- endfor %}]
        updated: >-
          {{ utcnow().timestamp()|int(0) }}
        sensor: >-
          {{ sensor }}
        state: >-
          {% set s = state_attr('sensor.motion_shellies_' + type|string,'status') %}
          {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s is iterable %}
            {% if s|select('==','on')|list|length > 0 %}on{% else %}off{% endif %}
          {% else %}off{% endif %}
    - alias: 'update group.motion_shellies'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: group.motion_shellies
        friendly_name: 'Shelly(s) group'
        macs: >-
          [{% for eid in states.binary_sensor|map(attribute='entity_id')|list if 'motion_shelly_' in eid  -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- state_attr(eid,'mac') -}}"
          {%- endfor %}]
        ids: >-
          [{%- for eid in states.binary_sensor|map(attribute='entity_id')|list if 'motion_shelly_' in eid  -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{- state_attr(eid,'id') -}}"
          {%- endfor -%}]
        types: >-
          {% if types|lower != 'none' -%}
            {%- if not types is string -%}{{- types|sort|unique|list|to_json|string -}}{%- else -%}{{- types|from_json|sort|unique|list|to_json|string -}}{%- endif -%}
          {%- else -%}{{- 'none' -}}{%- endif %}
        models: >-
          {% if models|lower != 'none' -%}
            {%- if not models is string -%}{{- models|sort|unique|list|to_json|string -}}{%- else -%}{{- models|from_json|sort|unique|list|to_json|string -}}{%- endif -%}
          {%- else -%}{{- 'none' -}}{%- endif %}
        entity_ids: >-
          [{%- for eid in states.binary_sensor|map(attribute='entity_id')|list if 'motion_shelly_' in eid  -%}
            {%- if not loop.first -%},{%- endif -%}
            "{{- eid -}}"
          {%- endfor -%}]
        sensor: >-
          {{ sensor }}
        all: >-
          {% if types|lower != 'none' -%}
            {%- if not types is string -%}{%- set types = types|sort|unique|list -%}{%- else -%}{%- set types = types|from_json|sort|unique|list -%}{%- endif -%}
            {%- if types|lower != 'none' and types is iterable and types|length > 0 -%}
              [{%- for type in types -%}
                {%- if not loop.first -%},{%- endif -%}
                {"type": "{{- type -}}","entities":
                [{%- for eid in states.binary_sensor|map(attribute='entity_id')|list if ('binary_sensor.motion_shellies_' + type|string) == eid  -%}
                  {%- set g = eid|replace('binary_sensor','group') -%}
                  {%- for e in state_attr(g,'entity_id') -%}
                    {%- if not loop.first -%},{%- endif -%}
                    {"entity":"{{- e -}}","id":"{{- state_attr(e,'id') -}}","ip":"{{- state_attr(e,'ip') -}}"}
                  {%- endfor -%}
                {%- endfor -%}]}
              {%- endfor -%}]
            {%- else -%}{{- 'none' -}}{%- endif -%}
          {%- else -%}{{- 'none' -}}{%- endif %}
        state: >-
          {%- if is_state('binary_sensor.motion_shellies_occupancy','on') and is_state('binary_sensor.motion_shellies_light','on') -%}
            {{- 'on' -}}
          {%- else -%}{{- 'off' -}}{%- endif -%}
    - alias: 'update info'
      service: homeassistant.update_entity
      entity_id: sensor.motion_shellies_update
    - alias: 'update input_select.motion_shellies'
      service: python_script.input_select_set_options
      data_template:
        entity_id: input_select.motion_shellies
        default: >-
          {% set s = states('input_select.motion_shellies') -%}
          {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' and s|lower != 'latest' and s|length > 0 -%}
            {{- s -}}
          {%- else -%}{{- id -}}{%- endif %}
        options: >-
          {% set s = state_attr('group.motion_shellies','entity_id') -%}
          {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' %}
            {%- for c in s -%}
              {%- if not loop.first -%},{%- endif -%}
              {{- state_attr(c,'id') -}}
              {%- if loop.last -%},none{%- endif -%}
            {%- endfor -%}
          {% else %}{{- 'none' -}}{%- endif %}
    - alias: 'update input_select.motion_shellies_<type>'
      service: python_script.input_select_set_options
      data_template:
        entity_id: >-
          {{ 'input_select.motion_shellies_' + type|string }}
        default: >-
          {% set s = states('input_select.motion_shellies_' + type|string) -%}
          {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' and s|lower != 'latest' and s|length > 0 -%}
            {{- s -}}
          {%- else -%}{{- id -}}{%- endif %}
        options: >-
          {% set s = state_attr('group.motion_shellies','entity_id') -%}
          {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' %}
            {%- for c in s if state_attr(c,'type')|string == type|string -%}
              {%- if not loop.first -%},{%- endif -%}
              {{- state_attr(c,'id') -}}
              {%- if loop.last -%},none{%- endif -%}
            {%- endfor -%}
          {% else %}{{- 'none' -}}{%- endif %}
    - alias: 'handle settings'
      choose:
        - alias: 'condition: manage settings off?'
          conditions:
            - condition: template
              value_template: >
                {{ is_state('input_boolean.motion_shellies_manage_settings','off') }}
          sequence:
            - alias: 'update settings: sensor.motion_shellies_settings_rest'
              service: homeassistant.update_entity
              entity_id: sensor.motion_shellies_settings_rest
        - alias: 'condition: manage settings on?'
          conditions:
            - condition: template
              value_template: >
                {{ is_state('input_boolean.motion_shellies_manage_settings','on') }}
          sequence:
            - alias: 'manage settings: login'
              service: homeassistant.update_entity
              entity_id: sensor.motion_shellies_settings_login
            - alias: 'wait for login settings to update'
              wait_for_trigger:
                - platform: state
                  entity_id: sensor.motion_shellies_settings_login
                  to: 'True'
              continue_on_timeout: true
              timeout:
                seconds: 5
            - alias: 'update settings: sensor.motion_shellies_settings_rest'
              service: homeassistant.update_entity
              entity_id: sensor.motion_shellies_settings_rest

- id: motion_shellies_scan
  alias: motion_shellies_scan
  initial_state: !secret shelly-enable
  mode: single
  trigger:
    - platform: state
      entity_id: sensor.motion_addon_rtsp
    - platform: state
      entity_id: input_boolean.motion_shellies_scan
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {% set s = state_attr('sensor.motion_addon_rtsp','rtsp') %}
          {{ s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' }}
      - condition: template
        value_template: >-
          {{ is_state('input_boolean.motion_shellies_scan','on') }}
  variables:
    devices: >-
      {%- set s = state_attr('sensor.motion_addon_rtsp','rtsp') -%}
      {%- if s|lower != 'none' and 'devices' in s %}
        {%- set s = s.devices -%}
        {%- if s|lower != 'none' and s|lower != 'unknown' and s|lower != 'unavailable' and s|lower != 'none' and s is iterable and s|length > 0 -%}
          {%- for c in s|selectattr('code','!=','200')|list -%}
            {%- if loop.first -%}[{%- else -%},{%- endif -%}
            "{{- c.ip -}}"
            {%- if loop.last -%}]{%- endif -%}
          {%- endfor -%}
        {% else %}{{- 'none' -}}{%- endif -%}
      {% else %}{{- 'none' -}}{%- endif -%}
  action:
    - alias: 'condition: devices good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ devices|lower != 'none' and devices is iterable and devices|length > 0 }}
    - alias: "check all non-rtsp devices for shelly"
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = devices[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|string|length > 0 }}
        sequence:
          - alias: "wait until ready"
            wait_template: >-
              {% set s = state_attr('automation.motion_shellies_scan_process','current') %}
              {{ s is number and s|int(0) == 0 }}
          - alias: "set_state: motion_shellies_scan_ip"
            service: python_script.set_state
            data_template:
              allow_create: true
              entity_id: sensor.motion_shellies_scan_ip
              state: >-
                {{ devices[repeat.index - 1] }}
          - alias: 'wait sensor update...'
            wait_for_trigger:
              - platform: state
                entity_id: sensor.motion_shellies_scan_ip
                to: >-
                  {{ devices[repeat.index - 1] }}
            continue_on_timeout: true
            timeout:
              seconds: 5
          - alias: 'sensor updated?'
            condition: and
            conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.motion_shellies_scan_ip') == devices[repeat.index - 1] }}
          - alias: "update motion_shellies_scan"
            service: homeassistant.update_entity
            entity_id: sensor.motion_shellies_scan
          - alias: 'wait scan to complete'
            wait_for_trigger:
              - platform: state
                entity_id: sensor.motion_shellies_scan
                to: 'True'
            continue_on_timeout: true
            timeout:
              seconds: 5
          - alias: 'condition: scan true?'
            condition: and
            conditions:
              - condition: template
                value_template: >
                  {{ states('sensor.motion_shellies_scan')|lower == 'true' }}
              - condition: template
                value_template: >
                  {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          - alias: 'notify success'
            service: persistent_notification.create
            data_template:
              title: >
                INFO: Intranet scan complete
              notification_id: >-
                {{ 'scan_completed' }}
              message: >
                {{ devices[repeat.index - 1] }}

#          - alias: "trigger automation.motion_shellies_scan_process"
#            service: automation.trigger
#            entity_id: automation.motion_shellies_scan_process

# {
#   "auth": true,
#   "fw": "20210429-100039/v1.10.4-g3f94cd7",
#   "mac": "ECFABC6F7138",
#   "num_outputs": 1,
#   "type": "SHVIN-1"
# }

- id: motion_shellies_scan_process
  alias: motion_shellies_scan_process
  initial_state: !secret shelly-enable
  mode: single
  trigger:
    - platform: state
      entity_id: sensor.motion_shellies_scan
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >-
          {% set s = states('sensor.motion_shellies_scan') %}
          {{ s|lower == 'true' }}
  variables:
    mac: >-
      {{ state_attr('sensor.motion_shellies_scan','mac')|lower }}
    model: >-
      {{ state_attr('sensor.motion_shellies_scan','type')|upper }}
    type: >-
      {% if model == 'SHMOS-01' %}
        {{ 'occupancy' }}
      {% elif model == 'SHBDUO-1' or model == 'SHVIN-1' %}
        {{ 'light' }}
      {% elif model == 'SHWT-1' %}
        {{ 'moisture' }}
      {% elif model == 'SHDW-2' %}
        {{ 'door' }}
      {% elif model == 'SHHT-1' %}
        {{ 'thermometer' }}
      {% elif model == 'SHBTN-2' %}
        {{ 'button' }}
      {% elif model == 'SHGS-1' %}
        {{ 'gas' }}
      {% elif model == 'SHPLG-U1' %}
        {{ 'plug' }}
      {% elif model == 'SHEM-3' %}
        {{ 'energy' }}
      {% else %}{{- 'none' -}}{% endif %}
    sensor: >-
      {% if mac|lower != 'none' and mac|length > 0 and type|lower != 'none' and type|length > 0 %}
        {{ 'binary_sensor.motion_shelly_' + type|string + '_' + mac|string }}
      {% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'condition: sensor good?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ sensor|lower != 'none' }}
    - alias: 'condition: sensor state none?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {% set s = states(sensor) %}
            {{ s|lower == 'none' }}
    - alias: 'create binary_sensor_motion_shelly_<type>_<mac>'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ sensor }}
        auth: >-
          {{ auth }}
        mac: >-
          {{ mac }}
        model: >-
          {{ model }}
        type: >-
          {{ type }}
        ip: >-
          {{ states(' sensor.motion_shellies_scan_ip') }}
    - alias: 'update "sensor" for group.motion_shellies'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: group.motion_shellies
        sensor: >-
          {{ sensor }}
    - alias: 'update sensor motion_shellies_settings_rest'
      service: homeassistant.update_entity
      entity_id: sensor.motion_shellies_settings_rest

### TIMEOUT

- id: motion_shellies_offline_timeout
  alias: motion_shellies_offline_timeout
  initial_state: 'off'
  mode: restart
  trigger:
    - platform: time_pattern
      minutes: /1
    - platform: state
      entity_id: input_number.motion_shellies_timeout
    - platform: state
      entity_id: group.motion_shellies
  variables:
    entities: >-
      {% set s = state_attr('group.motion_shellies','entity_id') %}
      {% if s|lower != 'none' and s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' %}
        {{ s }}
      {% else %}{{- 'none' -}}{% endif %}
    ago: >-
      {% if entities|lower != 'none' and entities is iterable %}
        {%- set now = utcnow().timestamp()|int(0) %}
        [{%- for e in entities -%}
          {%- if not loop.first -%},{%- endif -%}
          {%- if state_attr(e,'updated')|lower != 'none' -%}{{- now - state_attr(e,'updated')|int(0) -}}{%- else -%}{{- 'none' -}}{%- endif -%}
        {%- endfor %}]
      {% else %}{{- 'none' -}}{% endif %}
    offline: >-
      {% if entities|lower != 'none' and entities is iterable -%}
        [{%- for i in range(entities|count) if ago[i]|lower == 'none' or ago[i]|int(0) > states('input_number.motion_shellies_timeout')|int(0) -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{ state_attr(entities[i],'id') }}"
        {%- endfor -%}]
      {% else %}{{- 'none' -}}{% endif %}
    offline_eid: >-
      {% if entities|lower != 'none' and entities is iterable -%}
        [{%- for i in range(entities|count) if ago[i]|lower == 'none' or ago[i]|int(0) > 60 -%}
          {%- if not loop.first -%},{%- endif -%}
          "{{ entities[i] }}"
        {%- endfor -%}]
      {% else %}{{- 'none' -}}{% endif %}
  action:
    - alias: 'condition: entities defined?'
      condition: and
      conditions:
        - condition: template
          value_template: >
            {{ entities|lower != 'none' }}
    - alias: 'set binary_sensor.motion_shellies_offline'
      service: python_script.set_state
      data_template:
        allow_create: true
        entity_id: >-
          {{ 'binary_sensor.motion_shellies_offline' }}
        offline: >-
          {{ offline }}
        state: >-
          {% if offline|lower != 'none' and offline|count > 0 %}on{% else %}off{% endif %}
    - alias: 'repeat: all entity'
      repeat:
        while:
          - condition: template
            value_template: >-
              {% set s = entities[repeat.index - 1]|default('unknown') %}
              {{ s|lower != 'unavailable' and s|lower != 'unknown' and s|lower != 'none' and s|string|length > 0 }}
        sequence:
          - alias: 'set_state: binary_sensor.motion_shelly_<type>_<mac>'
            service_template: python_script.set_state
            data_template:
              entity_id: >-
                {{ entities[repeat.index - 1] }}
              ago: >-
                {{- ago[repeat.index - 1] -}}
              online: >-
                {%- set s = ago[repeat.index - 1] -%}
                {{- s|lower != 'none' and s|int(0) <= states('input_number.motion_shellies_timeout')|int(0) -}}
              state: >-
                {{ states(entities[repeat.index - 1]) }}
