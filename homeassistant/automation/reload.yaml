###
# homeassistant/automation/reload.yaml
###

- id: motion_restart
  alias: motion_restart
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'restart home assistant core'
      service: homeassistant.restart

- id: motion_reboot
  alias: motion_reboot
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reboot
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - alias: 'reboot host'
      service: hassio.host_reboot

- id: motion_reload
- id: motion_reload
  alias: motion_reload
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_reload
    - platform: state
      entity_id: binary_sensor.motion_reload_enabled
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      - alias: 'test if binary_sensor.motion_reload_enabled is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload_enabled','on') }}
      - alias: 'test if binary_sensor.motion_reload is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload','on') }}
      - alias: 'test if binary_sensor.motion_reloading is off'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_reloading','off') }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ is_state('binary_sensor.motion_addon_update','on') }}
        sequence:
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
              sequence:
                - alias: 'notify add-on update'
                  service: persistent_notification.create
                  data_template:
                    title: >-
                      ALERT: Updating add-on
                    notification_id: >-
                      {{ 'motion-addon-update' }}
                    message: >-
                      Updating add-on at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
          - alias: 'update add-on'
            service: automation.trigger
            entity_id: automation.motion_addon_update
          - alias: 'wait for add-on update'
            wait_for_trigger:
              - platform: state
                entity_id: binary_sensor.motion_addon_reload
                to: 'on'
          - alias: 'dismiss add-on update'
            service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ 'motion-addon-update' }}
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_reloading','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'set state binary_sensor.motion_reloading: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloading
        timestamp: >-
          {{ timestamp }}
        when: >-
          {{ when }}
        state: 'on'
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
        sequence:
          - alias: 'notify homeassistant restart'
            service: persistent_notification.create
            data_template:
              title: >-
                ALERT: System restarting
              notification_id: >-
                {{ 'motion-reload-restart' }}
              message: >-
                System restarting at {{ when }}
#    - alias: 'wait until HA has been up for a while'
#      wait_for_trigger:
#        - platform: template
#          value_template: >-
#            {%- set s = state_attr('sensor.motion_uptime','ago') -%}
#            {{- s|lower != 'none' and s|int(0) > state_attr('sensor.motion_uptime','wait') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - alias: 'restart home-assistant'
      service: homeassistant.restart

- id: motion_reloaded
  alias: motion_reloaded
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: homeassistant_start
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_reloading','on') }}
  action:
    - alias: 'set state binary_sensor.motion_reloading: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloading
        state: 'off'
    - alias: 'set state binary_sensor.motion_reloaded: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloaded
        state: 'on'
    - alias: 'set state binary_sensor.motion_reload: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reload
        state: 'off'
