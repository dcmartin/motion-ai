###
# homeassistant/automation/reload.yaml
###

- id: motion_reload_notification
  alias: motion_reload_notification
  initial_state: on
  mode: single
  trigger:
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'request'
  variables:
    id: >-
      {{ 'reload-notification' ~ context.id }}
    approve: >-
      {{ 'reload-notification-approve' -}}
    deny: >-
      {{ 'reload-notification-deny' -}}
    title: >-
     {{- 'System restart required' -}}
    message: >-
      {{ 'Please select <b>Approve</b> or <b>Deny</b>.' }}
    dismiss: >-
      {{- 'Deny' -}}
    approve: >-
      {{- 'Approve' -}}
    critical: >-
      {{- 'off' -}}
    interval: >-
      {{ 5 }}
    tag: >-
      {{ id }}
    persistent: >-
      {{ 'false' }}
    group: >-
      {{ 'reload' }}
    timeout: >-
      {{ interval|int * 60 }}
    chronometer: >-
      {{ 'false' }}
    alert_once: >-
      {{ 'false' }}
    when: >-
      {{ utcnow().timestamp()|int + interval }}
    device_id: >-
      {{ device_id(state_attr('sensor.motion_person','device')) }}
    channel: >-
      {{ states('sensor.motion_name') }}
    is_critical: >-
      {{ 'false' }}
    # platform specific
    ttl: >-
      {# Android specific #}
      {{ iif(is_critical, 0, 3600000) }}
    priority: >-
      {# Android specific #}
      {{ iif(is_critical, 'high', 'normal') }}
    subject: >-
      {# Android specific #}
      {{ 'Subject'}}
    subtitle: >-
      {# iOS specific #}
      {{ 'Subtitle'}}
    critical: >-
      {# iOS specific #}
      {{ iif(is_critical, 1, 0) }}
    volume: >-
      {# iOS specific #}
      {{ 1.0 }}
    sound: >-
      {# iOS specific #}
      {{ 'default' }}
    interruption_level:
      {# iOS specific #}
      {{ iif(is_critical, 'critical', 'active') }}
  action:
    - repeat:
        sequence:
          - alias: 'send reload_notification to motion_person.device'
            domain: mobile_app
            type: notify
            device_id: >-
              {{ device_id }}
            title: >-
              {{ title }}
            message: >-
             {{ message }}
            data: 
              subtitle: >-
                {{ subtitle }}
              subject: >-
                {{ subject }}
              channel: >-
                {{ channel }}
              tag: >-
                {{ tag }}
              group: >-
                {{ group }}
              ttl: >-
                {{ ttl }}
              priority: >-
                {{ priority }}
              push:
                sound:
                  name: >-
                    {{ sound }}
                  critical: >-
                    {{ critical }}
                  volume: >-
                    {{ volume }}
                interruption-level: >-
                  {{ interruption_level }}
              # Actions
              actions:
                - action: "reload-notification-deny"
                  title: "Deny"
                  destructive: true
                - action: "reload-notification-approve"
                  title: "Approve"
                  destructive: false
          - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: "reload-notification-approve"
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: "reload-notification-deny"
            timeout:
              minutes: >-
                {{ interval }}
        until: "{{ wait.remaining > 0 }}"

- id: motion_reload_notification_response
  alias: motion_reload_nnotification_response
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-approve"
  variables:
    delay: >-
      {{ state_attr('binary_sensor.motion_restarting','delay') }}
    timestamp: >-
      {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
    when: >-
      {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    to: >-
      {{ trigger.event.data.action|default(none) }}
    state: >-
      {% if to|lower != 'none' %}
        {{ to|replace('reload-notify-','') }}
      {% else %}none{% endif %}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ to|lower in state_attr('sensor.motion_reload_notify','states') }}
        sequence:
          - alias: 'change state for sensor.motion_reload_notify'
            service: python_script.set_state
            data_template:
              entity_id: sensor.motion_reload_notify
              timestamp: >-
                {{ timestamp }}
              when: >-
                {{ when }}
              state: >- 
                {{ state }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
        sequence:
          - alias: 'debug reload_notify'
            service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notify response
              notification_id: >-
                {{ 'reload-notify-response' }}
              message: >-
                Reload notification response received: {{ to }}; state: {{ state }}

- id: motion_restart
  alias: motion_restart
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'approve'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
        sequence:
          - alias: 'notify homeassistant restart'
            service: persistent_notification.create
            data_template:
              title: >-
                ALERT: System restarting
              notification_id: >-
                {{ 'motion-reload-restart' }}
              message: >-
                System restarting at {{ when }}
    - alias: 'restart home assistant core'
      service: homeassistant.restart

- id: motion_reboot
  alias: motion_reboot
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reboot
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert','critical'] }}
        sequence:
          - alias: 'notify system reboot'
            service: persistent_notification.create
            data_template:
              title: >-
                CRITICAL: System rebooting
              notification_id: >-
                {{ 'motion-reboot' }}
              message: >-
                System rebooting at {{ when }}
    - alias: 'reboot host'
      service: hassio.host_reboot

- id: motion_reload
  alias: motion_reload
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_reload
    - platform: state
      entity_id: binary_sensor.motion_reload_enabled
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      - alias: 'test if binary_sensor.motion_reload_enabled is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload_enabled','on') }}
      - alias: 'test if binary_sensor.motion_reload is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload','on') }}
      - alias: 'test if binary_sensor.motion_restarting is off'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_restarting','off') }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ is_state('binary_sensor.motion_addon_update','on') }}
        sequence:
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
              sequence:
                - alias: 'notify add-on update'
                  service: persistent_notification.create
                  data_template:
                    title: >-
                      ALERT: Updating add-on
                    notification_id: >-
                      {{ 'motion-addon-update' }}
                    message: >-
                      Updating add-on at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
          - alias: 'update add-on'
            service: automation.trigger
            entity_id: automation.motion_addon_update
          - alias: 'wait for add-on update'
            wait_for_trigger:
              - platform: state
                entity_id: binary_sensor.motion_addon_reload
                to: 'on'
          - alias: 'dismiss add-on update'
            service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ 'motion-addon-update' }}
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'set state binary_sensor.motion_restarting: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        timestamp: >-
          {{ timestamp }}
        when: >-
          {{ when }}
        state: 'on'
    - alias: 'trigger automation.motion_restart'
      service: automation.trigger
      entity_id: automation.motion_restart

- id: motion_reloaded
  alias: motion_reloaded
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: homeassistant_start
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_restarting','on') }}
  action:
    - alias: 'set state binary_sensor.motion_restarting: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        state: 'off'
    - alias: 'set state binary_sensor.motion_reloaded: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloaded
        state: 'on'
    - alias: 'set state binary_sensor.motion_reload: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reload
        state: 'off'
