###
# homeassistant/automation/reload.yaml
###

- id: motion_reload_notification
  alias: motion_reload_notification
  initial_state: on
  mode: restart
  trigger:
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'request'
  variables:
    service: >-
      {% set s = state_attr('sensor.motion_reload_notify','device') %}
      {% if s|lower != 'none' %}
        {{ 'notify.mobile_app_' + s|replace('device_tracker.','') }}
      {% else %}none{% endif %}
    channel: >-
      {{ states('sensor.motion_name') }}
    icon_url: >-
      {% set s = state_attr('sensor.motion_name','entity_picture') %}
      {% if s|lower != 'none' %}
        {{ s }}
      {% else %}{{ '/local/images/icon.png' }}{% endif %}
    id: >-
      {% set id = state_attr('sensor.motion_reload_notify','id') %}
      {{ id }}
    group: >-
      {% set group = state_attr('sensor.motion_reload_notify','group') %}
      {{ group }}
    interval: >-
      {% set interval = state_attr('sensor.motion_reload_notify','interval') %}
      {{ interval }}
    notification_icon: >-
      {% set notification_icon = state_attr('sensor.motion_reload_notify','notification_icon') %}
      {{ notification_icon }}
    image: >-
      {% set image = state_attr('sensor.motion_reload_notify','image') %}
      {{ image }}
    url: >-
      {% set url = state_attr('sensor.motion_reload_notify','url') %}
      {{ url }}
    title: >-
      {% set title = state_attr('sensor.motion_reload_notify','title') %}
      {{ title }}
    subtitle: >-
      {% set subtitle = state_attr('sensor.motion_reload_notify','subtitle') %}
      {{ subtitle }}
    message: >-
      {% set message = state_attr('sensor.motion_reload_notify','message') %}
      {{ message }}
    actions: >-
      {% set actions = state_attr('sensor.motion_reload_notify','actions') %}
      {{ actions }}
    sound: >-
      {% set sound = state_attr('sensor.motion_reload_notify','sound') %}
      {% if sound|lower == 'none' %}
        {% set sound = 'default' %}
      {% endif %}
      {{ sound }}
    persistent: >-
      {% set persistent = state_attr('sensor.motion_reload_notify','persistent') %}
      {% if persistent|lower == 'on' or persistent|lower == 'true' %}{% set persistent = true %}{% else %}{% set persistent = false %}
      {{ persistent }}
    tag: >-
      {% if persistent %}
        {% set tag = 'persistent' %}
      {% else %}
        {% set tag = state_attr('sensor.motion_reload_notify','tag') %}
        {% if tag|lower == 'none' %}
          {% set tag = id %}
        {% endif %}
      {% endif %}
      {{ tag }}
    critical: >-
      {% set critical = state_attr('sensor.motion_reload_notify','critical') %}
      {% if critical|lower == 'true' or critical|lower == 'on' %}{% set critical = 1 %}{% else %}{% set critical = 0 %}{% endif %}
      {{ critical }}
    volume: >-
      {{ 1.0 }}
    interruption_level: >-
      {% set levels = ['passive','active','time-sensitive','critical'] -%}
      {%- set critical = state_attr('sensor.motion_reload_notify','critical') -%}
      {%- if critical|lower == 'true' or critical|lower == 'on' -%}
        {%- set interruption_level = 'critical' -%}
      {%- else -%}
        {%- set interruption_level = state_attr('sensor.motion_reload_notify','interruption_level') -%}
        {% if not interruption_level|lower in levels -%}
          {% set interruption_level = 'active' %}
        {% endif %}
      {% endif %}
      {{ interruption_level }}
    badge: >-
      {{ 1 }}
    timeout: >-
      {{ interval|int * 60 }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - service: persistent_notification.create
            data:
              title: >-
                DEBUG: Reload notification
              notification_id: >-
                {{ 'debug-reload-notification' }}
              message: >-
                <b>Start</b> at <i>{{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}</i>
                <ul>
                <li>id: "{{ id }}"</li>
                <li>service: "{{ service }}"</li>
                <li>channel: "{{ channel }}"</li>
                <li>group: "{{ group }}"</li>
                <li>tag: "{{ tag }}"</li>
                <li>image: "{{ image }}"</li>
                <li>icon_url: "{{ icon_url }}"</li>
                <li>notification_icon: "{{ notification_icon }}"</li>
                <li>title: "{{ title }}"</li>
                <li>message: "{{ message }}"</li>
                <li>interval: "{{ interval }}"</li>
                <li>interruption_level: "{{ interruption_level }}"</li>
                <li>persistent: "{{ persistent }}"</li>
                <li>critical: "{{ critical }}"</li>
                <li>volume: "{{ volume }}"</li>
                <li>sound: "{{ sound }}"</li>
                <li>timeout: "{{ timeout }}"</li>
                <li>actions: "{{ actions|string }}"</li>
                </ul>
    - alias: 'test if notification service is defined'
      condition:
        - condition: template
          value_template: >-
            {{ service|lower != 'none' and service is string and service|length > 0 }}
    - repeat:
        sequence:
          - alias: 'send reload_notification to motion_person.device'
            service: "{{ service }}"
            data: 
              title: >-
                {{ title }}
              message: >-
               {{ message }}
              data:
                actions: >-
                  {{ actions }}
                channel: >-
                  {{ channel }}
                group: >-
                  {{ group }}
                tag: >-
                  {{ tag }}
                notification_icon: >-
                  {{ notification_icon }}
                icon_url: >-
                  {{ icon_url }}
                image: >-
                  {{ image }}
                push:
                  sound: >-
                    name: >-
                      {{ sound }}
                    critical: >-
                      {{ critical }}
                    volume: >-
                      {{ volume}}
                  interruption_level: >-
                    {{ interruption_level }}
                  badge: >-
                    {{ badge }}
                  persistent: >-
                    {{ persistent }}
          - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: >-
                 {# first action - approve #}
                 {{ actions[0].action }}
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: >-
                 {# third action - deny #}
                 {{ actions[2].action }}
            timeout:
              minutes: >-
                {{ interval }}
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug'] }}
              sequence:
                - service: persistent_notification.create
                  data_template:
                    title: >-
                      DEBUG: Reload notification
                    notification_id: >-
                      {{ 'debug-reload-notification' }}
                    message: >-
                      <b>Timeout</b> after {{ interval }} minutes; repeating at <i>{{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}</i>
        until: >-
          {{ wait.remaining > 0 }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notification
              notification_id: >-
                {{ 'debug-reload-notification' }}
              message: >-
                <b>Complete</b> at <i>{{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}</i>

- id: motion_reload_notification_response
  alias: motion_reload_notification_response
  mode: queued
  initial_state: on
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-approve"
  variables:
    origin: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.origin|default(none) }}
      {% else %}none{% endif %}
    time_fired: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.time_fired|default(none) }}
      {% else %}none{% endif %}
    context: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.context }}
      {% else %}none{% endif %}
    response: >-
      {% if trigger|lower != 'none' %}
        {{ trigger.event.data.action|default(none)|string|replace('reload-notification-','') }}
      {% else %}none{% endif %}
    responses: >-
      {{ state_attr('sensor.motion_reload_notify','responses') }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notification response
              notification_id: >-
                {{ 'debug-reload-notification-response' }}
              message: >-
                <b>Response</b> received: "{{ response -}}"; context: {{ context|string -}}; at: {{ time_fired }}
    - choose:
      - alias: 'test if response in responses'
        conditions:
          - condition: template
            value_template: >
              {{ response|lower in responses }}
        sequence:
          - alias: 'set motion_reload_notify: timestamp, when'
            variables:
              timestamp: >-
                {% set delay = state_attr('binary_sensor.motion_restarting','delay')|int(60) %}
                {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
              when: >-
                {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
              state: >-
                {{ response }}
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug','info','notice','alert','critical'] }}
                - condition: template
                  value_template: >
                    {{ state|lower == 'approve' }}
              sequence:
                - service: persistent_notification.create
                  data_template:
                    title: >-
                      ALERT: Reload approved
                    notification_id: >-
                      {{ 'reload-notification-approve' }}
                    message: >-
                      <b>Update</b> to <code>{{- state -}}</code> at <i>{{- when -}}</i>
          - alias: 'set sensor.motion_reload_notify to new state w/ timestamp, when'
            service: python_script.set_state
            data_template:
              entity_id: sensor.motion_reload_notify
              timestamp: >-
                {{ timestamp }}
              when: >-
                {{ when }}
              state: >- 
                {{ state }}

- id: motion_restart
  alias: motion_restart
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'approve'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
        sequence:
          - alias: 'notify homeassistant restart'
            service: persistent_notification.create
            data_template:
              title: >-
                ALERT: System restarting
              notification_id: >-
                {{ 'motion-reload-restart' }}
              message: >-
                System restarting at {{ when }}
    - alias: 'restart home assistant core'
      service: homeassistant.restart

- id: motion_reboot
  alias: motion_reboot
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reboot
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert','critical'] }}
        sequence:
          - alias: 'notify system reboot'
            service: persistent_notification.create
            data_template:
              title: >-
                CRITICAL: System rebooting
              notification_id: >-
                {{ 'motion-reboot' }}
              message: >-
                System rebooting at {{ when }}
    - alias: 'reboot host'
      service: hassio.host_reboot

- id: motion_reload
  alias: motion_reload
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_reload
    - platform: state
      entity_id: binary_sensor.motion_reload_enabled
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      - alias: 'test if binary_sensor.motion_reload_enabled is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload_enabled','on') }}
      - alias: 'test if binary_sensor.motion_reload is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload','on') }}
      - alias: 'test if binary_sensor.motion_restarting is off'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_restarting','off') }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ is_state('binary_sensor.motion_addon_update','on') }}
        sequence:
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
              sequence:
                - alias: 'notify add-on update'
                  service: persistent_notification.create
                  data_template:
                    title: >-
                      ALERT: Updating add-on
                    notification_id: >-
                      {{ 'motion-addon-update' }}
                    message: >-
                      Updating add-on at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
          - alias: 'update add-on'
            service: automation.trigger
            entity_id: automation.motion_addon_update
          - alias: 'wait for add-on update'
            wait_for_trigger:
              - platform: state
                entity_id: binary_sensor.motion_addon_reload
                to: 'on'
          - alias: 'dismiss add-on update'
            service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ 'motion-addon-update' }}
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'set state binary_sensor.motion_restarting: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        timestamp: >-
          {{ timestamp }}
        when: >-
          {{ when }}
        state: 'on'
    - alias: 'trigger automation.motion_restart'
      service: automation.trigger
      entity_id: automation.motion_restart

- id: motion_reloaded
  alias: motion_reloaded
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: homeassistant_start
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_restarting','on') }}
  action:
    - alias: 'set state binary_sensor.motion_restarting: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        state: 'off'
    - alias: 'set state binary_sensor.motion_reloaded: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloaded
        state: 'on'
    - alias: 'set state binary_sensor.motion_reload: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reload
        state: 'off'
