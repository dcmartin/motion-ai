###
# homeassistant/automation/reload.yaml
###

## reset

- id: motion_reset
  alias: motion_reset
  mode: single
  initial_state: 'on'
  trigger:
  action:
    - alias: 'set input_boolean.motion_reset on'
      service: input_boolean.turn_on
      entity_id: input_boolean.motion_reset
    - alias: 'update binary_sensor.motion_reset'
      service: homeassistant.update_entity
      entity_id: 'binary_sensor.motion_reset'
    - alias: 'update sensor.motion_reset to remove configuration'
      service: homeassistant.update_entity
      entity_id: 'sensor.motion_reset'
    - alias: 'set input_boolean.motion_reset off'
      service: input_boolean.turn_off
      entity_id: input_boolean.motion_reset
    - alias: 'update binary_sensor.motion_reset'
      service: homeassistant.update_entity
      entity_id: 'binary_sensor.motion_reset'
    - alias: 'wait to restart'
      delay:
        seconds: >-
          {{ state_attr('binary_sensor.motion_reset','delay')|int(5) }}
    - alias: 'restart home assistant'
      service: homeassistant.restart
    - wait_for_trigger:
        - platform: homeassistant
          event: start

## restart

- id: motion_request_restart
  alias: motion_request_restart
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_restart
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('input_boolean.motion_restart_off','on') }}
      - condition: template
        value_template: >
          {{ not is_state('binary_sensor.motion_restarting','on') }}
      - condition: template
        value_template: >
          {{ not is_state('binary_sensor.motion_rebooting','on') }}
  action:
    - alias: 'set input_boolean.motion_restart_requested'
      service: input_boolean.turn_on
      entity_id: input_boolean.motion_restart_requested

- id: motion_restart_on
  alias: motion_restart_on
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_restart
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_restarting','off') }}
      - condition: template
        value_template: >
          {{ is_state('input_boolean.motion_restart_off','off') }}
  action:
    - alias: 'trigger automation.motion_restart'
      service: automation.trigger
      entity_id: automation.motion_restart

- id: motion_restart_approve
  alias: motion_restart_approve
  mode: restart
  initial_state: 'on'
  trigger:
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('input_boolean.motion_restart_requested','on') }}
  action:
    - alias: 'turn off restart_requested'
      service: input_boolean.turn_off
      entity_id: input_boolean.motion_restart_requested
    - alias: 'set sensor.motion_notification_restart to approve'
      service: python_script.set_state
      data_template:
        entity_id: sensor.motion_notification_restart
        state: >-
          {{- 'approve' -}}

- id: motion_restart
  alias: motion_restart
  mode: restart
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.motion_notification_restart
      to: 'approve'
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay')|int(60) }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'notify homeassistant restart'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: System restarting
                notification_id: >-
                  {{ 'motion-restart-restarting' }}
                message: >-
                  System restarting at {{ when }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - alias: 'restart homeassistant..'
      repeat:
        sequence:
          - alias: 'call service homeassistant.restart'
            service: homeassistant.restart
          - alias: 'wait for homeassistant start event; 1 minute'
            wait_for_trigger:
              - platform: homeassistant
                event: start
            continue_on_timeout: true
            timeout:
              minutes: 1
        until:
          - alias: 'until wait is over'
            condition: template
            value_template: >-
              {{ wait is defined and wait is iterable and 'completed' in wait and wait.completed }}

## reboot

- id: motion_reboot
  alias: motion_reboot
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reboot
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_rebooting','delay')|int(60) }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'set binary_sensor.motion_rebooting'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_rebooting
        timestamp: >-
          {{ timestamp }}
        when: >-
          {{ when }}
        state: >-
          {{ 'on' }}
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','critical') }}
          sequence:
            - alias: 'notify system reboot'
              service: persistent_notification.create
              data_template:
                title: >-
                  CRITICAL: System rebooting
                notification_id: >-
                  {{ 'motion-reboot' }}
                message: >-
                  System rebooting at {{ when }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - alias: 'reboot host'
      service: hassio.host_reboot

## refresh (restart add-on)

- id: motion_refresh
  alias: motion_refresh
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.motion_refresh
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      - alias: 'test if add-on is defined'
        condition: template
        value_template: >
          {{ state_attr('binary_sensor.motion_addon_update','id')|lower != 'none' }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'notify add-on restart'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Restarting add-on
                notification_id: >-
                  {{ 'motion-addon-restart' }}
                message: >-
                  Restarting add-on at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
    - alias: 'trigger automation.motion_addon_restart'
      service: automation.trigger
      entity_id: automation.motion_addon_restart
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.motion_addon_restart
          to: 'on'
      continue_on_timeout: true
      timeout:
        minutes: 1
    - alias: 'dismiss add-on restart'
      service: persistent_notification.dismiss
      data_template:
        notification_id: >-
          {{ 'motion-addon-restart' }}

## reload

- id: motion_reload
  alias: motion_reload
  mode: single
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reload
      to: 'on'
    - platform: state
      entity_id: binary_sensor.motion_reload
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_reloading','off') }}
      - condition: template
        value_template: >
          {{ is_state('input_boolean.motion_reload_off','off') }}
  action:
    - choose:
        - conditions:
            - condition: template
              value_template: >
                {{ states('sensor.motion_log_level') in state_attr('sensor.motion_log_level','info') }}
          sequence:
            - alias: 'notify add-on restart'
              service: persistent_notification.create
              data_template:
                title: >-
                  INFO: Configuration reloading
                notification_id: >-
                  {{ 'motion-config-reload' }}
                message: >-
                  Starting at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
    - alias: 'trigger homeassistant.reload_core_config'
      service: homeassistant.reload_core_config
    - alias: 'dismiss configuration reload'
      service: persistent_notification.dismiss
      data_template:
        notification_id: >-
          {{ 'motion-config-reload' }}

