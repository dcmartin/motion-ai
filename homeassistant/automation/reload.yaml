###
# homeassistant/automation/reload.yaml
###

- id: motion_reload_notification
  alias: motion_reload_notification
  initial_state: on
  mode: single
  trigger:
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'request'
  variables:
    tracker: >-
      {% set s = state_attr('sensor.motion_person','device') %}
      {% if s|lower != 'none' %}
        {{ s|replace('device_tracker.','') }}
      {% else %}none{% endif %}
    service: >-
      {% if tracker|lower != 'none' %}
        {{ 'notify.mobile_app_' + tracker }}
      {% else %}none{% endif %}
    id: >-
      {{ 'reload-notification' }}
    group: >-
      {{ 'reload' }}
    tag: >-
      {{ id }}
    channel: >-
      {{ states('sensor.motion_name') }}
    notification_icon: >-
      {% set s = state_attr('sensor.motion_name','icon') %}
      {% if s|lower != 'none' %}
        {{ s }}
      {% else %}{{ 'mdi:home-assistant' }}{% endif %}
    icon_url: >-
      {% set s = state_attr('sensor.motion_name','entity_picture') %}
      {% if s|lower != 'none' %}
        {{ s }}
      {% else %}{{ '/local/images/icon.png' }}{% endif %}
    title: >-
     {{- 'System restart required' -}}
    message: >-
      {{ 'Please select <b>Approve</b> or <b>Deny</b>.' }}
    actions: >-
      {% set s = [{'action':'reload-notification-approve','title':'Approve','destructive':'false'},{'action':'reload-notification-deny','title':'Deny','destructive':'true'}] %}
      {{ s }}
    interval: >-
      {{ 5 }}
    persistent: >-
      {{ 'false' }}
    timeout: >-
      {{ interval|int * 60 }}
#    alert_once: >-
#      {{ 'true' }}
#    chronometer: >-
#      {{ 'false' }}
#    when: >-
#      {{ utcnow().timestamp()|int + interval }}
#    is_critical: >-
#      {{ 'false' }}
#    importance: >-
#      {# high, low, max, min, default #}
#      {{ 'default' }}
#    subtitle: >-
#      {# iOS specific #}
#      {{ 'Subtitle'}}
#    critical: >-
#      {# iOS specific #}
#      {% if is_critical|lower == 'false' %}0{% else %}1{% endif %}
#    volume: >-
#      {# iOS specific #}
#      {{ 1.0 }}
#    sound: >-
#      {# iOS specific #}
#      {{ 'default' }}
#    interruption_level:
#      {# iOS specific #}
#      {% if is_critical|lower == 'false' %}active{% else %}critical{% endif %}
#    ttl: >-
#      {# Android specific #}
#      {% if is_critical|lower == 'false' %}3600000{% else %}0{% endif %}
#    priority: >-
#      {# Android specific #}
#      {% if is_critical|lower == 'false' %}normal{% else %}high{% endif %}
#    subject: >-
#      {# Android specific #}
#      {{ 'Subject'}}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - alias: 'debug reload notification'
            service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notification start
              notification_id: >-
                {{ 'debug-reload-notification' }}
              message: >-
                Reload notification start at <i>{{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}</i>
                <h2>{{ service }}</h2>
                <ul>
                <li>id: "{{ id }}"</li>
                <li>tag: "{{ tag }}"</li>
                <li>group: "{{ group }}"</li>
                <li>tracker: "{{ tracker }}"</li>
                <li>channel: "{{ channel }}"</li>
                <li>icon_url: "{{ icon_url }}"</li>
                <li>notification_icon: "{{ notification_icon }}"</li>
                <li>message: "{{ message }}"</li>
                <li>title: "{{ title }}"</li>
                <li>actions: "{{ actions|string }}"</li>
                <li>interval: "{{ interval }}"</li>
                </ul>
#                <li>importance: "{{ importance }}"</li>
#                <li>chronometer: "{{ chronometer }}"</li>
#                <li>when: "{{ when }}"</li>
#                <li>critical: "{{ critical }}"</li>
#                <li>interruption_level: "{{ interruption_level }}"</li>
#                <li>priority: "{{ priority }}"</li>
#                <li>sound: "{{ sound }}"</li>
#                <li>subject: "{{ subject }}"</li>
#                <li>subtitle: "{{ subtitle }}"</li>
#                <li>volume: "{{ volume }}"</li>
#                <li>ttl: "{{ ttl }}"</li>
    - alias: 'test if notification service is defined'
      condition:
        - condition: template
          value_template: >-
            {{ service|lower != 'none' and service is string and service|length > 0 }}
    - repeat:
        sequence:
          - alias: 'send reload_notification to motion_person.device'
#            #
#            domain: mobile_app
#            type: notify
#            device_id: >-
#              {{ tracker }}
#            #
#            service: "{{ service }}"
#              title: >-
#                {{ title }}
#              message: >-
#               {{ message }}
#              data: >-
            service: mobile_app.notify
            target: "{{ tracker }}"
            data_template: 
              title: >-
                {{ title }}
              message: >-
               {{ message }}
              channel: >-
                {{ channel }}
              group: >-
                {{ group }}
              tag: >-
                {{ tag }}
              notification_icon: >-
                {{ notification_icon }}
              icon_url: >-
                {{ icon_url }}
#              when: >-
#                {{ when }}
#              importance: >-
#                {{ importance }}
#              ttl: >-
#                {{ ttl }}
#              priority: >-
#                {{ priority }}
#              subtitle: >-
#                {{ subtitle }}
#              subject: >-
#                {{ subject }}
#              chronometer: >-
#                {{ chronometer }}
              push:
#                sound:
#                  name: >-
#                    {{ sound }}
#                  critical: >-
#                    {{ critical }}
#                  volume: >-
#                    {{ volume }}
#                interruption-level: >-
#                  {{ interruption_level }}
              actions: >-
                {{ actions }}
          - wait_for_trigger:
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: >-
                 {{ actions[0].action }}
            - platform: event
              event_type: mobile_app_notification_action
              event_data:
                action: >-
                 {{ actions[1].action }}
            timeout:
              minutes: >-
                {{ interval }}
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug'] }}
              sequence:
                - alias: 'debug reload notification'
                  service: persistent_notification.create
                  data_template:
                    title: >-
                      DEBUG: Reload notification timeout
                    notification_id: >-
                      {{ 'debug-reload-notification' }}
                    message: >-
                      {{ 'Reload notification timeout' }}
        until: >-
          {{ wait.remaining > 0 }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - alias: 'debug reload notification'
            service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notification
              notification_id: >-
                {{ 'debug-reload-notification' }}
              message: >-
                {{ 'Reload notification complete' }}

- id: motion_reload_notification_response
  alias: motion_reload_notification_response
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-deny"
    - platform: event
      event_type: mobile_app_notification_action
      event_data:
        action: "reload-notification-approve"
  variables:
    response: >-
      {% set s = trigger %}
      {% if 'event' in s %}
        {% set s = s.event %}
        {% if 'data' in s %}
          {% set s = s.data %}
          {% if 'action' in s %}
            {% set s = s.action|replace('reload-notification-','') %}
          {% else %}{{ 'no-action' }}{% endif %}
        {% else %}{{ 'no-data' }}{% endif %}
      {% else %}{{ 'no-event' }}{% endif %}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug'] }}
        sequence:
          - alias: 'notification response'
            service: persistent_notification.create
            data_template:
              title: >-
                DEBUG: Reload notification response
              notification_id: >-
                {{ 'debug-reload-notification' }}
              message: >-
                Reload notification response received: "{{ response -}}"
#    - choose:
#      - conditions:
#          - condition: template
#            value_template: >
#              {{ response|lower in state_attr('sensor.motion_reload_notify','states') }}
#        sequence:
#          - variables:
#              delay: >-
#                {{ state_attr('binary_sensor.motion_restarting','delay') }}
#              timestamp: >-
#                {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
#              when: >-
#                {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
#          - alias: 'change state for sensor.motion_reload_notify'
#            service: python_script.set_state
#            data_template:
#              entity_id: sensor.motion_reload_notify
#              timestamp: >-
#                {{ timestamp }}
#              when: >-
#                {{ when }}
#              state: >- 
#                {{ response }}

- id: motion_restart
  alias: motion_restart
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_restart
      to: 'on'
    - platform: state
      entity_id: sensor.motion_reload_notify
      to: 'approve'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
        sequence:
          - alias: 'notify homeassistant restart'
            service: persistent_notification.create
            data_template:
              title: >-
                ALERT: System restarting
              notification_id: >-
                {{ 'motion-reload-restart' }}
              message: >-
                System restarting at {{ when }}
    - alias: 'restart home assistant core'
      service: homeassistant.restart

- id: motion_reboot
  alias: motion_reboot
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: input_boolean.motion_reboot
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
  action:
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'wait for delay'
      delay:
        seconds: >-
          {{ delay }}
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states('input_select.motion_log_level') in ['debug','info','notice','alert','critical'] }}
        sequence:
          - alias: 'notify system reboot'
            service: persistent_notification.create
            data_template:
              title: >-
                CRITICAL: System rebooting
              notification_id: >-
                {{ 'motion-reboot' }}
              message: >-
                System rebooting at {{ when }}
    - alias: 'reboot host'
      service: hassio.host_reboot

- id: motion_reload
  alias: motion_reload
  mode: single
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_reload
    - platform: state
      entity_id: binary_sensor.motion_reload_enabled
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      - alias: 'test if binary_sensor.motion_reload_enabled is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload_enabled','on') }}
      - alias: 'test if binary_sensor.motion_reload is on'
        condition: template
        value_template: >
         {{ is_state('binary_sensor.motion_reload','on') }}
      - alias: 'test if binary_sensor.motion_restarting is off'
        condition: template
        value_template: >-
          {{ is_state('binary_sensor.motion_restarting','off') }}
  action:
    - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ is_state('binary_sensor.motion_addon_update','on') }}
        sequence:
          - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('input_select.motion_log_level') in ['debug','info','notice','alert'] }}
              sequence:
                - alias: 'notify add-on update'
                  service: persistent_notification.create
                  data_template:
                    title: >-
                      ALERT: Updating add-on
                    notification_id: >-
                      {{ 'motion-addon-update' }}
                    message: >-
                      Updating add-on at {{ utcnow().timestamp()|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') -}}
          - alias: 'update add-on'
            service: automation.trigger
            entity_id: automation.motion_addon_update
          - alias: 'wait for add-on update'
            wait_for_trigger:
              - platform: state
                entity_id: binary_sensor.motion_addon_reload
                to: 'on'
          - alias: 'dismiss add-on update'
            service: persistent_notification.dismiss
            data_template:
              notification_id: >-
                {{ 'motion-addon-update' }}
    - variables:
        delay: >-
          {{ state_attr('binary_sensor.motion_restarting','delay') }}
        timestamp: >-
          {{ (utcnow() + timedelta(seconds=delay))|as_timestamp }}
        when: >-
          {{ timestamp|timestamp_custom("%a %b %d %I:%M %p %Z",true,'unknown') }}
    - alias: 'set state binary_sensor.motion_restarting: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        timestamp: >-
          {{ timestamp }}
        when: >-
          {{ when }}
        state: 'on'
    - alias: 'trigger automation.motion_restart'
      service: automation.trigger
      entity_id: automation.motion_restart

- id: motion_reloaded
  alias: motion_reloaded
  mode: single
  initial_state: on
  trigger:
    - platform: event
      event_type: homeassistant_start
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: >
          {{ is_state('binary_sensor.motion_restarting','on') }}
  action:
    - alias: 'set state binary_sensor.motion_restarting: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_restarting
        state: 'off'
    - alias: 'set state binary_sensor.motion_reloaded: on'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reloaded
        state: 'on'
    - alias: 'set state binary_sensor.motion_reload: off'
      service: python_script.set_state
      data_template:
        entity_id: binary_sensor.motion_reload
        state: 'off'
