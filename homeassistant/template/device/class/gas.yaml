###
# homeassistant/template/device/class/gas.yaml
###

- unique_id: motion_device_gas_high_spike
  trigger:
    - platform: state
      entity_id: sensor.motion_device_gas_1w_max
  sensor:
    - name: 'motion_device_gas_high_spike'
      state_class: 'measurement'
      device_class: 'power_factor'
      unit_of_measurement: '%'
      attributes:
        limit: >-
          {% set mean = state_attr('sensor.motion_device_gas_max','mean') %}
          {% set stdev = state_attr('sensor.motion_device_gas_max','stdev') %}
          {%- if mean|lower != 'none' and mean is number and stdev|lower != 'none' and stdev is number -%}
            {% set max = state_attr('sensor.motion_device_gas_max','max') %}
            {% set s = mean|float(0) + stdev|float(0) * states('input_number.motion_device_gas_stdev')|float(1) %}
            {%- if s > max|float(s) -%}{{ max }}{%- else -%}{{ s }}{%- endif -%}
          {%- else -%}none{%- endif -%}
        factor: >-
          {% set mean = state_attr('sensor.motion_device_gas_max','mean') %}
          {% set stdev = state_attr('sensor.motion_device_gas_max','stdev') %}
          {%- if mean|lower != 'none' and mean is number and stdev|lower != 'none' and stdev is number and mean|float(0) > 0 -%}
            {{ (mean|float(0) + stdev|float(0)) / mean|float(1) * 100 }}
          {%- else -%}none{%- endif -%}
        spike: >-
         {{ states.sensor.motion_device_gas_max.attributes }}
      state: >-
        {{- state_attr('sensor.motion_device_gas','max') -}}

- unique_id: motion_device_gas_low_spike
  trigger:
    - platform: state
      entity_id: sensor.motion_device_gas_1w_min
  sensor:
    - name: 'motion_device_gas_low_spike'
      state_class: 'measurement'
      device_class: 'power_factor'
      unit_of_measurement: '%'
      attributes:
        limit: >-
          {% set mean = state_attr('sensor.motion_device_gas_min','mean') %}
          {% set stdev = state_attr('sensor.motion_device_gas_min','stdev') %}
          {%- if mean|lower != 'none' and mean is number and stdev|lower != 'none' and stdev is number -%}
            {% set min = state_attr('sensor.motion_device_gas_min','min') %}
            {% set s = mean|float(0) + stdev|float(0) * states('input_number.motion_device_gas_stdev')|float(1) %}
            {%- if s < min|float(s) -%}{{ min }}{%- else -%}{{ s }}{%- endif -%}
          {%- else -%}none{%- endif -%}
        factor: >-
          {% set mean = state_attr('sensor.motion_device_gas_min','mean') %}
          {% set stdev = state_attr('sensor.motion_device_gas_min','stdev') %}
          {%- if mean|lower != 'none' and mean is number and stdev|lower != 'none' and stdev is number and mean|float(0) > 0 -%}
            {{ (mean|float(0) - stdev|float(0)) / mean|float(1) * 100 }}
          {%- else -%}none{%- endif -%}
        spike: >-
         {{ states.sensor.motion_device_gas_min.attributes }}
      state: >-
        {{- state_attr('sensor.motion_device_gas','min') -}}

- unique_id: motion_device_gas_alarm
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_device_gas_alarm_exist
  binary_sensor:
    - name: 'motion_device_gas_alarm'
      device_class: problem
      attributes:
        status: >-
          {{ '{' -}}
          {%- for i in state_attr('binary_sensor.motion_device_class','alarms') -%}
            {%- if not loop.first -%},{%- endif -%}
            {{- '"' + i|string + '":"' ~ states('binary_sensor.motion_device_gas_' + i) ~ '"' -}}
          {%- endfor -%}
          {{- '}' }}
        markdown: >-
          {%- for i in state_attr('binary_sensor.motion_device_class','alarms') if is_state('binary_sensor.motion_device_gas_' + i|string,'on') -%}
            {%- if loop.first -%}<ul>{%- endif -%}
            {%- if states('binary_sensor.motion_device_gas_' + i|string) -%}
              {%- set s = state_attr('binary_sensor.motion_device_gas_' + i|string,'markdown') -%}
               <li>The gas alarm is: <b>{{- i|upper -}}</b>{%- if s|lower != 'none' -%}<br>{{- s -}}</br>{%- endif -%}</li>
            {%- endif -%}
            {%- if loop.last -%}</ul>{%- endif -%}
          {%- endfor -%}
      state: >-
        {%- set s = state_attr('binary_sensor.motion_device_class','alarms') -%}
        {%- if s|lower != 'none' and not s is string and s is iterable and s|count > 0 -%}
          {%- for i in s if states('binary_sensor.motion_device_gas_' + i)|lower == 'on' -%}
            {%- if loop.first -%}on{%- endif -%}
          {% else %}off{%- endfor -%}
        {%- else -%}unknown{%- endif -%}

- unique_id: motion_device_gas_count
  trigger:
    - platform: state
      entity_id: sensor.motion_domain_sensor_count
      not_to:
        - 'none'
        - 'unknown'
      for:
        minutes: 1
    - platform: state
      entity_id: sensor.motion_domain_binary_sensor_count
      not_to:
        - 'none'
        - 'unknown'
      for:
        minutes: 1
  sensor:
    - name: 'motion_device_gas_count'
      state_class: 'measurement'
      device_class: 'power_factor'
      unit_of_measurement: '%'
      state: >-
        {{ (states.sensor|list + states.binary_sensor|list)|rejectattr('entity_id','search','.motion_')|map(attribute='attributes.device_class')|select('defined')|select('==','gas')|list|count }}

